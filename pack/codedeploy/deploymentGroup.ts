// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class DeploymentGroup extends fabric.Resource {
    public readonly alarmConfiguration?: fabric.Computed<{ alarms?: string[], enabled?: boolean, ignorePollAlarmFailure?: boolean }[]>;
    public readonly appName: fabric.Computed<string>;
    public readonly autoRollbackConfiguration?: fabric.Computed<{ enabled?: boolean, events?: string[] }[]>;
    public readonly autoscalingGroups?: fabric.Computed<string[]>;
    public readonly deploymentConfigName?: fabric.Computed<string>;
    public readonly deploymentGroupName: fabric.Computed<string>;
    public readonly ec2TagFilter?: fabric.Computed<{ key?: string, type?: string, value?: string }[]>;
    public readonly onPremisesInstanceTagFilter?: fabric.Computed<{ key?: string, type?: string, value?: string }[]>;
    public readonly serviceRoleArn: fabric.Computed<string>;
    public readonly triggerConfiguration?: fabric.Computed<{ triggerEvents: string[], triggerName: string, triggerTargetArn: string }[]>;

    constructor(urnName: string, args: DeploymentGroupArgs, dependsOn?: fabric.Resource[]) {
        if (args.appName === undefined) {
            throw new Error("Missing required property 'appName'");
        }
        if (args.deploymentGroupName === undefined) {
            throw new Error("Missing required property 'deploymentGroupName'");
        }
        if (args.serviceRoleArn === undefined) {
            throw new Error("Missing required property 'serviceRoleArn'");
        }
        super("aws:codedeploy/deploymentGroup:DeploymentGroup", urnName, {
            "alarmConfiguration": args.alarmConfiguration,
            "appName": args.appName,
            "autoRollbackConfiguration": args.autoRollbackConfiguration,
            "autoscalingGroups": args.autoscalingGroups,
            "deploymentConfigName": args.deploymentConfigName,
            "deploymentGroupName": args.deploymentGroupName,
            "ec2TagFilter": args.ec2TagFilter,
            "onPremisesInstanceTagFilter": args.onPremisesInstanceTagFilter,
            "serviceRoleArn": args.serviceRoleArn,
            "triggerConfiguration": args.triggerConfiguration,
        }, dependsOn);
    }
}

export interface DeploymentGroupArgs {
    readonly alarmConfiguration?: fabric.MaybeComputed<{ alarms?: fabric.MaybeComputed<fabric.MaybeComputed<string>>[], enabled?: fabric.MaybeComputed<boolean>, ignorePollAlarmFailure?: fabric.MaybeComputed<boolean> }>[];
    readonly appName: fabric.MaybeComputed<string>;
    readonly autoRollbackConfiguration?: fabric.MaybeComputed<{ enabled?: fabric.MaybeComputed<boolean>, events?: fabric.MaybeComputed<fabric.MaybeComputed<string>>[] }>[];
    readonly autoscalingGroups?: fabric.MaybeComputed<fabric.MaybeComputed<string>>[];
    readonly deploymentConfigName?: fabric.MaybeComputed<string>;
    readonly deploymentGroupName: fabric.MaybeComputed<string>;
    readonly ec2TagFilter?: fabric.MaybeComputed<{ key?: fabric.MaybeComputed<string>, type?: fabric.MaybeComputed<string>, value?: fabric.MaybeComputed<string> }>[];
    readonly onPremisesInstanceTagFilter?: fabric.MaybeComputed<{ key?: fabric.MaybeComputed<string>, type?: fabric.MaybeComputed<string>, value?: fabric.MaybeComputed<string> }>[];
    readonly serviceRoleArn: fabric.MaybeComputed<string>;
    readonly triggerConfiguration?: fabric.MaybeComputed<{ triggerEvents: fabric.MaybeComputed<fabric.MaybeComputed<string>>[], triggerName: fabric.MaybeComputed<string>, triggerTargetArn: fabric.MaybeComputed<string> }>[];
}

