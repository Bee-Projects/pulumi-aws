// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Stream extends lumi.NamedResource implements StreamArgs {
    public readonly arn: string;
    public readonly name: string;
    public readonly retentionPeriod?: number;
    public readonly shardCount: number;
    public readonly shardLevelMetrics?: string[];
    public readonly tags?: {[key: string]: any};

    public static get(id: lumi.ID): Stream {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Stream[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: StreamArgs) {
        super(urnName);
        this.arn = <any>args.arn;
        this.name = <any>args.name;
        this.retentionPeriod = <any>args.retentionPeriod;
        if (lumirt.defaultIfComputed(args.shardCount, "") === undefined) {
            throw new Error("Property argument 'shardCount' is required, but was missing");
        }
        this.shardCount = <any>args.shardCount;
        this.shardLevelMetrics = <any>args.shardLevelMetrics;
        this.tags = <any>args.tags;
    }
}

export interface StreamArgs {
    readonly arn?: string;
    readonly name?: string;
    readonly retentionPeriod?: number;
    readonly shardCount: number;
    readonly shardLevelMetrics?: string[];
    readonly tags?: {[key: string]: any};
}

