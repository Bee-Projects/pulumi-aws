// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class Project extends fabric.Resource {
    public readonly artifacts: fabric.Property<{ location?: string, name?: string, namespaceType?: string, packaging?: string, path?: string, type: string }[]>;
    public readonly buildTimeout?: fabric.Property<number>;
    public readonly description: fabric.Property<string>;
    public readonly encryptionKey: fabric.Property<string>;
    public readonly environment: fabric.Property<{ computeType: string, environmentVariable: { name: string, value: string }[], image: string, privilegedMode?: boolean, type: string }[]>;
    public readonly name: fabric.Property<string>;
    public readonly serviceRole: fabric.Property<string>;
    public readonly source: fabric.Property<{ auth?: { resource?: string, type: string }[], buildspec?: string, location?: string, type: string }[]>;
    public readonly tags?: fabric.Property<{[key: string]: any}>;

    constructor(urnName: string, args: ProjectArgs) {
        if (args.artifacts === undefined) {
            throw new Error("Missing required property 'artifacts'");
        }
        if (args.environment === undefined) {
            throw new Error("Missing required property 'environment'");
        }
        if (args.source === undefined) {
            throw new Error("Missing required property 'source'");
        }
        super("aws:codebuild/project:Project", urnName, {
            "artifacts": args.artifacts,
            "buildTimeout": args.buildTimeout,
            "description": args.description,
            "encryptionKey": args.encryptionKey,
            "environment": args.environment,
            "name": args.name,
            "serviceRole": args.serviceRole,
            "source": args.source,
            "tags": args.tags,
        });
    }
}

export interface ProjectArgs {
    readonly artifacts: fabric.PropertyValue<{ location?: fabric.PropertyValue<string>, name?: fabric.PropertyValue<string>, namespaceType?: fabric.PropertyValue<string>, packaging?: fabric.PropertyValue<string>, path?: fabric.PropertyValue<string>, type: fabric.PropertyValue<string> }>[];
    readonly buildTimeout?: fabric.PropertyValue<number>;
    readonly description?: fabric.PropertyValue<string>;
    readonly encryptionKey?: fabric.PropertyValue<string>;
    readonly environment: fabric.PropertyValue<{ computeType: fabric.PropertyValue<string>, environmentVariable?: fabric.PropertyValue<{ name: fabric.PropertyValue<string>, value: fabric.PropertyValue<string> }>[], image: fabric.PropertyValue<string>, privilegedMode?: fabric.PropertyValue<boolean>, type: fabric.PropertyValue<string> }>[];
    readonly name?: fabric.PropertyValue<string>;
    readonly serviceRole?: fabric.PropertyValue<string>;
    readonly source: fabric.PropertyValue<{ auth?: fabric.PropertyValue<{ resource?: fabric.PropertyValue<string>, type: fabric.PropertyValue<string> }>[], buildspec?: fabric.PropertyValue<string>, location?: fabric.PropertyValue<string>, type: fabric.PropertyValue<string> }>[];
    readonly tags?: fabric.PropertyValue<{[key: string]: any}>;
}

