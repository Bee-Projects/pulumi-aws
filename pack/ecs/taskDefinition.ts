// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class TaskDefinition extends lumi.NamedResource implements TaskDefinitionArgs {
    public /*out*/ readonly arn: string;
    public readonly containerDefinitions: string;
    public readonly family: string;
    public readonly networkMode: string;
    public readonly placementConstraints?: { expression?: string, type: string }[];
    public /*out*/ readonly revision: number;
    public readonly taskRoleArn?: string;
    public readonly volume?: { hostPath?: string, name: string }[];

    public static get(id: lumi.ID): TaskDefinition {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): TaskDefinition[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: TaskDefinitionArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.containerDefinitions, "") === undefined) {
            throw new Error("Property argument 'containerDefinitions' is required, but was missing");
        }
        this.containerDefinitions = <any>args.containerDefinitions;
        if (lumirt.defaultIfComputed(args.family, "") === undefined) {
            throw new Error("Property argument 'family' is required, but was missing");
        }
        this.family = <any>args.family;
        this.networkMode = <any>args.networkMode;
        this.placementConstraints = <any>args.placementConstraints;
        this.taskRoleArn = <any>args.taskRoleArn;
        this.volume = <any>args.volume;
    }
}

export interface TaskDefinitionArgs {
    readonly containerDefinitions: string;
    readonly family: string;
    readonly networkMode?: string;
    readonly placementConstraints?: { expression?: string, type: string }[];
    readonly taskRoleArn?: string;
    readonly volume?: { hostPath?: string, name: string }[];
}

