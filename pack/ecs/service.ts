// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Service extends lumi.NamedResource implements ServiceArgs {
    public readonly cluster: string;
    public readonly deploymentMaximumPercent?: number;
    public readonly deploymentMinimumHealthyPercent?: number;
    public readonly desiredCount?: number;
    public readonly iamRole?: string;
    public readonly loadBalancer?: { containerName: string, containerPort: number, elbName?: string, targetGroupArn?: string }[];
    public readonly serviceName: string;
    public readonly placementConstraints?: { expression?: string, type: string }[];
    public readonly placementStrategy?: { field?: string, type: string }[];
    public readonly taskDefinition: string;

    public static get(id: lumi.ID): Service {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Service[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: ServiceArgs) {
        super(name);
        this.cluster = <any>args.cluster;
        this.deploymentMaximumPercent = <any>args.deploymentMaximumPercent;
        this.deploymentMinimumHealthyPercent = <any>args.deploymentMinimumHealthyPercent;
        this.desiredCount = <any>args.desiredCount;
        this.iamRole = <any>args.iamRole;
        this.loadBalancer = <any>args.loadBalancer;
        this.serviceName = <any>args.serviceName;
        this.placementConstraints = <any>args.placementConstraints;
        this.placementStrategy = <any>args.placementStrategy;
        if (lumirt.defaultIfComputed(args.taskDefinition, "") === undefined) {
            throw new Error("Property argument 'taskDefinition' is required, but was missing");
        }
        this.taskDefinition = <any>args.taskDefinition;
    }
}

export interface ServiceArgs {
    readonly cluster?: string;
    readonly deploymentMaximumPercent?: number;
    readonly deploymentMinimumHealthyPercent?: number;
    readonly desiredCount?: number;
    readonly iamRole?: string;
    readonly loadBalancer?: { containerName: string, containerPort: number, elbName?: string, targetGroupArn?: string }[];
    readonly serviceName?: string;
    readonly placementConstraints?: { expression?: string, type: string }[];
    readonly placementStrategy?: { field?: string, type: string }[];
    readonly taskDefinition: string;
}

