// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class LoadBalancer extends lumi.NamedResource implements LoadBalancerArgs {
    public readonly accessLogs?: { bucket: string, bucketPrefix?: string, enabled?: boolean, interval?: number }[];
    public readonly availabilityZones: string[];
    public readonly connectionDraining?: boolean;
    public readonly connectionDrainingTimeout?: number;
    public readonly crossZoneLoadBalancing?: boolean;
    public /*out*/ readonly dnsName: string;
    public readonly healthCheck: { healthyThreshold: number, interval: number, target: string, timeout: number, unhealthyThreshold: number }[];
    public readonly idleTimeout?: number;
    public readonly instances: string[];
    public readonly internal: boolean;
    public readonly listener: { instancePort: number, instanceProtocol: string, lbPort: number, lbProtocol: string, sslCertificateId?: string }[];
    public readonly loadBalancerName: string;
    public readonly namePrefix?: string;
    public readonly securityGroups: string[];
    public readonly sourceSecurityGroup: string;
    public /*out*/ readonly sourceSecurityGroupId: string;
    public readonly subnets: string[];
    public readonly tags?: {[key: string]: any};
    public /*out*/ readonly zoneId: string;

    constructor(name: string, args: LoadBalancerArgs) {
        super(name);
        this.accessLogs = args.accessLogs;
        this.availabilityZones = args.availabilityZones;
        this.connectionDraining = args.connectionDraining;
        this.connectionDrainingTimeout = args.connectionDrainingTimeout;
        this.crossZoneLoadBalancing = args.crossZoneLoadBalancing;
        this.healthCheck = args.healthCheck;
        this.idleTimeout = args.idleTimeout;
        this.instances = args.instances;
        this.internal = args.internal;
        if (lumirt.defaultIfComputed(args.listener, "") === undefined) {
            throw new Error("Property argument 'listener' is required, but was missing");
        }
        this.listener = args.listener;
        this.loadBalancerName = args.loadBalancerName;
        this.namePrefix = args.namePrefix;
        this.securityGroups = args.securityGroups;
        this.sourceSecurityGroup = args.sourceSecurityGroup;
        this.subnets = args.subnets;
        this.tags = args.tags;
    }
}

export interface LoadBalancerArgs {
    readonly accessLogs?: { bucket: string, bucketPrefix?: string, enabled?: boolean, interval?: number }[];
    readonly availabilityZones?: string[];
    readonly connectionDraining?: boolean;
    readonly connectionDrainingTimeout?: number;
    readonly crossZoneLoadBalancing?: boolean;
    readonly healthCheck?: { healthyThreshold: number, interval: number, target: string, timeout: number, unhealthyThreshold: number }[];
    readonly idleTimeout?: number;
    readonly instances?: string[];
    readonly internal?: boolean;
    readonly listener: { instancePort: number, instanceProtocol: string, lbPort: number, lbProtocol: string, sslCertificateId?: string }[];
    readonly loadBalancerName?: string;
    readonly namePrefix?: string;
    readonly securityGroups?: string[];
    readonly sourceSecurityGroup?: string;
    readonly subnets?: string[];
    readonly tags?: {[key: string]: any};
}

