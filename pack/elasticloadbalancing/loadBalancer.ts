// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class LoadBalancer
        extends fabric.Resource implements LoadBalancerArgs {
    public readonly accessLogs?: fabric.Property<{ bucket: string, bucketPrefix?: string, enabled?: boolean, interval?: number }[]>;
    public readonly availabilityZones: fabric.Property<string[]>;
    public readonly connectionDraining?: fabric.Property<boolean>;
    public readonly connectionDrainingTimeout?: fabric.Property<number>;
    public readonly crossZoneLoadBalancing?: fabric.Property<boolean>;
    public /*out*/ readonly dnsName: fabric.Property<string>;
    public readonly healthCheck: fabric.Property<{ healthyThreshold: number, interval: number, target: string, timeout: number, unhealthyThreshold: number }[]>;
    public readonly idleTimeout?: fabric.Property<number>;
    public readonly instances: fabric.Property<string[]>;
    public readonly internal: fabric.Property<boolean>;
    public readonly listener: fabric.Property<{ instancePort: number, instanceProtocol: string, lbPort: number, lbProtocol: string, sslCertificateId?: string }[]>;
    public readonly name: fabric.Property<string>;
    public readonly namePrefix?: fabric.Property<string>;
    public readonly securityGroups: fabric.Property<string[]>;
    public readonly sourceSecurityGroup: fabric.Property<string>;
    public /*out*/ readonly sourceSecurityGroupId: fabric.Property<string>;
    public readonly subnets: fabric.Property<string[]>;
    public readonly tags?: fabric.Property<{[key: string]: any}>;
    public /*out*/ readonly zoneId: fabric.Property<string>;

    constructor(urnName: string, args: LoadBalancerArgs) {
        if (args.listener === undefined) {
            throw new Error("Missing required property 'listener'");
        }
        super("aws:elasticloadbalancing/loadBalancer:LoadBalancer", urnName, {
            "accessLogs": args.accessLogs,
            "availabilityZones": args.availabilityZones,
            "connectionDraining": args.connectionDraining,
            "connectionDrainingTimeout": args.connectionDrainingTimeout,
            "crossZoneLoadBalancing": args.crossZoneLoadBalancing,
            "healthCheck": args.healthCheck,
            "idleTimeout": args.idleTimeout,
            "instances": args.instances,
            "internal": args.internal,
            "listener": args.listener,
            "name": args.name,
            "namePrefix": args.namePrefix,
            "securityGroups": args.securityGroups,
            "sourceSecurityGroup": args.sourceSecurityGroup,
            "subnets": args.subnets,
            "tags": args.tags,
        });
    }
}

export interface LoadBalancerArgs {
    readonly accessLogs?: fabric.PropertyValue<{ bucket: string, bucketPrefix?: string, enabled?: boolean, interval?: number }[]>;
    readonly availabilityZones?: fabric.PropertyValue<string[]>;
    readonly connectionDraining?: fabric.PropertyValue<boolean>;
    readonly connectionDrainingTimeout?: fabric.PropertyValue<number>;
    readonly crossZoneLoadBalancing?: fabric.PropertyValue<boolean>;
    readonly healthCheck?: fabric.PropertyValue<{ healthyThreshold: number, interval: number, target: string, timeout: number, unhealthyThreshold: number }[]>;
    readonly idleTimeout?: fabric.PropertyValue<number>;
    readonly instances?: fabric.PropertyValue<string[]>;
    readonly internal?: fabric.PropertyValue<boolean>;
    readonly listener: fabric.PropertyValue<{ instancePort: number, instanceProtocol: string, lbPort: number, lbProtocol: string, sslCertificateId?: string }[]>;
    readonly name?: fabric.PropertyValue<string>;
    readonly namePrefix?: fabric.PropertyValue<string>;
    readonly securityGroups?: fabric.PropertyValue<string[]>;
    readonly sourceSecurityGroup?: fabric.PropertyValue<string>;
    readonly subnets?: fabric.PropertyValue<string[]>;
    readonly tags?: fabric.PropertyValue<{[key: string]: any}>;
}

