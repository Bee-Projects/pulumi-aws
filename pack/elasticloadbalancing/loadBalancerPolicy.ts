// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class LoadBalancerPolicy extends lumi.NamedResource implements LoadBalancerPolicyArgs {
    public readonly loadBalancerName: string;
    public readonly policyAttribute?: { name?: string, value?: string }[];
    public readonly policyName: string;
    public readonly policyTypeName: string;

    public static get(id: lumi.ID): LoadBalancerPolicy {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): LoadBalancerPolicy[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: LoadBalancerPolicyArgs) {
        super(urnName);
        if (lumirt.defaultIfComputed(args.loadBalancerName, "") === undefined) {
            throw new Error("Property argument 'loadBalancerName' is required, but was missing");
        }
        this.loadBalancerName = <any>args.loadBalancerName;
        this.policyAttribute = <any>args.policyAttribute;
        if (lumirt.defaultIfComputed(args.policyName, "") === undefined) {
            throw new Error("Property argument 'policyName' is required, but was missing");
        }
        this.policyName = <any>args.policyName;
        if (lumirt.defaultIfComputed(args.policyTypeName, "") === undefined) {
            throw new Error("Property argument 'policyTypeName' is required, but was missing");
        }
        this.policyTypeName = <any>args.policyTypeName;
    }
}

export interface LoadBalancerPolicyArgs {
    readonly loadBalancerName: string;
    readonly policyAttribute?: { name?: string, value?: string }[];
    readonly policyName: string;
    readonly policyTypeName: string;
}

