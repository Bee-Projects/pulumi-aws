// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Endpoint extends lumi.NamedResource implements EndpointArgs {
    public readonly certificateArn: string;
    public readonly databaseName?: string;
    public /*out*/ readonly endpointArn: string;
    public readonly endpointId: string;
    public readonly endpointType: string;
    public readonly engineName: string;
    public readonly extraConnectionAttributes: string;
    public readonly kmsKeyArn: string;
    public readonly password?: string;
    public readonly port?: number;
    public readonly serverName?: string;
    public readonly serviceAccessRole?: string;
    public readonly sslMode: string;
    public readonly tags?: {[key: string]: any};
    public readonly username?: string;

    public static get(id: lumi.ID): Endpoint {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Endpoint[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: EndpointArgs) {
        super(urnName);
        this.certificateArn = <any>args.certificateArn;
        this.databaseName = <any>args.databaseName;
        if (lumirt.defaultIfComputed(args.endpointId, "") === undefined) {
            throw new Error("Property argument 'endpointId' is required, but was missing");
        }
        this.endpointId = <any>args.endpointId;
        if (lumirt.defaultIfComputed(args.endpointType, "") === undefined) {
            throw new Error("Property argument 'endpointType' is required, but was missing");
        }
        this.endpointType = <any>args.endpointType;
        if (lumirt.defaultIfComputed(args.engineName, "") === undefined) {
            throw new Error("Property argument 'engineName' is required, but was missing");
        }
        this.engineName = <any>args.engineName;
        this.extraConnectionAttributes = <any>args.extraConnectionAttributes;
        this.kmsKeyArn = <any>args.kmsKeyArn;
        this.password = <any>args.password;
        this.port = <any>args.port;
        this.serverName = <any>args.serverName;
        this.serviceAccessRole = <any>args.serviceAccessRole;
        this.sslMode = <any>args.sslMode;
        this.tags = <any>args.tags;
        this.username = <any>args.username;
    }
}

export interface EndpointArgs {
    readonly certificateArn?: string;
    readonly databaseName?: string;
    readonly endpointId: string;
    readonly endpointType: string;
    readonly engineName: string;
    readonly extraConnectionAttributes?: string;
    readonly kmsKeyArn?: string;
    readonly password?: string;
    readonly port?: number;
    readonly serverName?: string;
    readonly serviceAccessRole?: string;
    readonly sslMode?: string;
    readonly tags?: {[key: string]: any};
    readonly username?: string;
}

