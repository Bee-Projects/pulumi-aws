// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class ReplicationInstance extends lumi.NamedResource implements ReplicationInstanceArgs {
    public readonly allocatedStorage: number;
    public readonly applyImmediately?: boolean;
    public readonly autoMinorVersionUpgrade: boolean;
    public readonly availabilityZone: string;
    public readonly engineVersion: string;
    public readonly kmsKeyArn: string;
    public readonly multiAz: boolean;
    public readonly preferredMaintenanceWindow: string;
    public readonly publiclyAccessible: boolean;
    public /*out*/ readonly replicationInstanceArn: string;
    public readonly replicationInstanceClass: string;
    public readonly replicationInstanceId: string;
    public /*out*/ readonly replicationInstancePrivateIps: string[];
    public /*out*/ readonly replicationInstancePublicIps: string[];
    public readonly replicationSubnetGroupId: string;
    public readonly tags?: {[key: string]: any};
    public readonly vpcSecurityGroupIds: string[];

    constructor(name: string, args: ReplicationInstanceArgs) {
        super(name);
        this.allocatedStorage = args.allocatedStorage;
        this.applyImmediately = args.applyImmediately;
        this.autoMinorVersionUpgrade = args.autoMinorVersionUpgrade;
        this.availabilityZone = args.availabilityZone;
        this.engineVersion = args.engineVersion;
        this.kmsKeyArn = args.kmsKeyArn;
        this.multiAz = args.multiAz;
        this.preferredMaintenanceWindow = args.preferredMaintenanceWindow;
        this.publiclyAccessible = args.publiclyAccessible;
        if (lumirt.defaultIfComputed(args.replicationInstanceClass, "") === undefined) {
            throw new Error("Property argument 'replicationInstanceClass' is required, but was missing");
        }
        this.replicationInstanceClass = args.replicationInstanceClass;
        if (lumirt.defaultIfComputed(args.replicationInstanceId, "") === undefined) {
            throw new Error("Property argument 'replicationInstanceId' is required, but was missing");
        }
        this.replicationInstanceId = args.replicationInstanceId;
        this.replicationSubnetGroupId = args.replicationSubnetGroupId;
        this.tags = args.tags;
        this.vpcSecurityGroupIds = args.vpcSecurityGroupIds;
    }
}

export interface ReplicationInstanceArgs {
    readonly allocatedStorage?: number;
    readonly applyImmediately?: boolean;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly availabilityZone?: string;
    readonly engineVersion?: string;
    readonly kmsKeyArn?: string;
    readonly multiAz?: boolean;
    readonly preferredMaintenanceWindow?: string;
    readonly publiclyAccessible?: boolean;
    readonly replicationInstanceClass: string;
    readonly replicationInstanceId: string;
    readonly replicationSubnetGroupId?: string;
    readonly tags?: {[key: string]: any};
    readonly vpcSecurityGroupIds?: string[];
}

