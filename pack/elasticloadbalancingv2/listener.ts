// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Listener extends lumi.NamedResource implements ListenerArgs {
    public /*out*/ readonly arn: string;
    public readonly certificateArn?: string;
    public readonly defaultAction: { targetGroupArn: string, type: string }[];
    public readonly loadBalancerArn: string;
    public readonly port: number;
    public readonly protocol?: string;
    public readonly sslPolicy: string;

    public static get(id: lumi.ID): Listener {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Listener[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: ListenerArgs) {
        super(urnName);
        this.certificateArn = <any>args.certificateArn;
        if (lumirt.defaultIfComputed(args.defaultAction, "") === undefined) {
            throw new Error("Property argument 'defaultAction' is required, but was missing");
        }
        this.defaultAction = <any>args.defaultAction;
        if (lumirt.defaultIfComputed(args.loadBalancerArn, "") === undefined) {
            throw new Error("Property argument 'loadBalancerArn' is required, but was missing");
        }
        this.loadBalancerArn = <any>args.loadBalancerArn;
        if (lumirt.defaultIfComputed(args.port, "") === undefined) {
            throw new Error("Property argument 'port' is required, but was missing");
        }
        this.port = <any>args.port;
        this.protocol = <any>args.protocol;
        this.sslPolicy = <any>args.sslPolicy;
    }
}

export interface ListenerArgs {
    readonly certificateArn?: string;
    readonly defaultAction: { targetGroupArn: string, type: string }[];
    readonly loadBalancerArn: string;
    readonly port: number;
    readonly protocol?: string;
    readonly sslPolicy?: string;
}

