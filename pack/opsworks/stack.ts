// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Stack extends lumi.NamedResource implements StackArgs {
    public readonly agentVersion: string;
    public readonly berkshelfVersion?: string;
    public readonly color?: string;
    public readonly configurationManagerName?: string;
    public readonly configurationManagerVersion?: string;
    public readonly customCookbooksSource: { password?: string, revision?: string, sshKey?: string, type: string, url: string, username?: string }[];
    public readonly customJson?: string;
    public readonly defaultAvailabilityZone: string;
    public readonly defaultInstanceProfileArn: string;
    public readonly defaultOs?: string;
    public readonly defaultRootDeviceType?: string;
    public readonly defaultSshKeyName?: string;
    public readonly defaultSubnetId: string;
    public readonly hostnameTheme?: string;
    public /*out*/ readonly stackId: string;
    public readonly manageBerkshelf?: boolean;
    public readonly stackName?: string;
    public readonly region: string;
    public readonly serviceRoleArn: string;
    public /*out*/ readonly stackEndpoint: string;
    public readonly useCustomCookbooks?: boolean;
    public readonly useOpsworksSecurityGroups?: boolean;
    public readonly vpcId: string;

    constructor(name: string, args: StackArgs) {
        super(name);
        this.agentVersion = args.agentVersion;
        this.berkshelfVersion = args.berkshelfVersion;
        this.color = args.color;
        this.configurationManagerName = args.configurationManagerName;
        this.configurationManagerVersion = args.configurationManagerVersion;
        this.customCookbooksSource = args.customCookbooksSource;
        this.customJson = args.customJson;
        this.defaultAvailabilityZone = args.defaultAvailabilityZone;
        if (lumirt.defaultIfComputed(args.defaultInstanceProfileArn, "") === undefined) {
            throw new Error("Property argument 'defaultInstanceProfileArn' is required, but was missing");
        }
        this.defaultInstanceProfileArn = args.defaultInstanceProfileArn;
        this.defaultOs = args.defaultOs;
        this.defaultRootDeviceType = args.defaultRootDeviceType;
        this.defaultSshKeyName = args.defaultSshKeyName;
        this.defaultSubnetId = args.defaultSubnetId;
        this.hostnameTheme = args.hostnameTheme;
        this.manageBerkshelf = args.manageBerkshelf;
        this.stackName = args.stackName;
        if (lumirt.defaultIfComputed(args.region, "") === undefined) {
            throw new Error("Property argument 'region' is required, but was missing");
        }
        this.region = args.region;
        if (lumirt.defaultIfComputed(args.serviceRoleArn, "") === undefined) {
            throw new Error("Property argument 'serviceRoleArn' is required, but was missing");
        }
        this.serviceRoleArn = args.serviceRoleArn;
        this.useCustomCookbooks = args.useCustomCookbooks;
        this.useOpsworksSecurityGroups = args.useOpsworksSecurityGroups;
        this.vpcId = args.vpcId;
    }
}

export interface StackArgs {
    readonly agentVersion?: string;
    readonly berkshelfVersion?: string;
    readonly color?: string;
    readonly configurationManagerName?: string;
    readonly configurationManagerVersion?: string;
    readonly customCookbooksSource?: { password?: string, revision?: string, sshKey?: string, type: string, url: string, username?: string }[];
    readonly customJson?: string;
    readonly defaultAvailabilityZone?: string;
    readonly defaultInstanceProfileArn: string;
    readonly defaultOs?: string;
    readonly defaultRootDeviceType?: string;
    readonly defaultSshKeyName?: string;
    readonly defaultSubnetId?: string;
    readonly hostnameTheme?: string;
    readonly manageBerkshelf?: boolean;
    readonly stackName?: string;
    readonly region: string;
    readonly serviceRoleArn: string;
    readonly useCustomCookbooks?: boolean;
    readonly useOpsworksSecurityGroups?: boolean;
    readonly vpcId?: string;
}

