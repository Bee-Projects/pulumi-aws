// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class StaticWebLayer extends lumi.NamedResource implements StaticWebLayerArgs {
    public readonly autoAssignElasticIps?: boolean;
    public readonly autoAssignPublicIps?: boolean;
    public readonly autoHealing?: boolean;
    public readonly customConfigureRecipes?: string[];
    public readonly customDeployRecipes?: string[];
    public readonly customInstanceProfileArn?: string;
    public readonly customJson?: string;
    public readonly customSecurityGroupIds?: string[];
    public readonly customSetupRecipes?: string[];
    public readonly customShutdownRecipes?: string[];
    public readonly customUndeployRecipes?: string[];
    public readonly drainElbOnShutdown?: boolean;
    public readonly ebsVolume?: { iops?: number, mountPoint: string, numberOfDisks: number, raidLevel?: string, size: number, type?: string }[];
    public readonly elasticLoadBalancer?: string;
    public /*out*/ readonly layerId: string;
    public readonly installUpdatesOnBoot?: boolean;
    public readonly instanceShutdownTimeout?: number;
    public readonly name: string;
    public readonly stackId: string;
    public readonly systemPackages?: string[];
    public readonly useEbsOptimizedInstances?: boolean;

    public static get(id: lumi.ID): StaticWebLayer {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): StaticWebLayer[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: StaticWebLayerArgs) {
        super(urnName);
        this.autoAssignElasticIps = <any>args.autoAssignElasticIps;
        this.autoAssignPublicIps = <any>args.autoAssignPublicIps;
        this.autoHealing = <any>args.autoHealing;
        this.customConfigureRecipes = <any>args.customConfigureRecipes;
        this.customDeployRecipes = <any>args.customDeployRecipes;
        this.customInstanceProfileArn = <any>args.customInstanceProfileArn;
        this.customJson = <any>args.customJson;
        this.customSecurityGroupIds = <any>args.customSecurityGroupIds;
        this.customSetupRecipes = <any>args.customSetupRecipes;
        this.customShutdownRecipes = <any>args.customShutdownRecipes;
        this.customUndeployRecipes = <any>args.customUndeployRecipes;
        this.drainElbOnShutdown = <any>args.drainElbOnShutdown;
        this.ebsVolume = <any>args.ebsVolume;
        this.elasticLoadBalancer = <any>args.elasticLoadBalancer;
        this.installUpdatesOnBoot = <any>args.installUpdatesOnBoot;
        this.instanceShutdownTimeout = <any>args.instanceShutdownTimeout;
        this.name = <any>args.name;
        if (lumirt.defaultIfComputed(args.stackId, "") === undefined) {
            throw new Error("Property argument 'stackId' is required, but was missing");
        }
        this.stackId = <any>args.stackId;
        this.systemPackages = <any>args.systemPackages;
        this.useEbsOptimizedInstances = <any>args.useEbsOptimizedInstances;
    }
}

export interface StaticWebLayerArgs {
    readonly autoAssignElasticIps?: boolean;
    readonly autoAssignPublicIps?: boolean;
    readonly autoHealing?: boolean;
    readonly customConfigureRecipes?: string[];
    readonly customDeployRecipes?: string[];
    readonly customInstanceProfileArn?: string;
    readonly customJson?: string;
    readonly customSecurityGroupIds?: string[];
    readonly customSetupRecipes?: string[];
    readonly customShutdownRecipes?: string[];
    readonly customUndeployRecipes?: string[];
    readonly drainElbOnShutdown?: boolean;
    readonly ebsVolume?: { iops?: number, mountPoint: string, numberOfDisks: number, raidLevel?: string, size: number, type?: string }[];
    readonly elasticLoadBalancer?: string;
    readonly installUpdatesOnBoot?: boolean;
    readonly instanceShutdownTimeout?: number;
    readonly name?: string;
    readonly stackId: string;
    readonly systemPackages?: string[];
    readonly useEbsOptimizedInstances?: boolean;
}

