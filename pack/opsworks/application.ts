// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Application extends lumi.NamedResource implements ApplicationArgs {
    public readonly appSource: { password?: string, revision?: string, sshKey?: string, type: string, url?: string, username?: string }[];
    public readonly autoBundleOnDeploy?: string;
    public readonly awsFlowRubySettings?: string;
    public readonly dataSourceArn?: string;
    public readonly dataSourceDatabaseName?: string;
    public readonly dataSourceType?: string;
    public readonly description?: string;
    public readonly documentRoot?: string;
    public readonly domains?: string[];
    public readonly enableSsl?: boolean;
    public readonly environment?: { key: string, secure?: boolean, value: string }[];
    public /*out*/ readonly applicationId: string;
    public readonly name: string;
    public readonly railsEnv?: string;
    public readonly shortName: string;
    public readonly sslConfiguration?: { certificate: string, chain?: string, privateKey: string }[];
    public readonly stackId: string;
    public readonly type: string;

    public static get(id: lumi.ID): Application {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Application[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: ApplicationArgs) {
        super(urnName);
        this.appSource = <any>args.appSource;
        this.autoBundleOnDeploy = <any>args.autoBundleOnDeploy;
        this.awsFlowRubySettings = <any>args.awsFlowRubySettings;
        this.dataSourceArn = <any>args.dataSourceArn;
        this.dataSourceDatabaseName = <any>args.dataSourceDatabaseName;
        this.dataSourceType = <any>args.dataSourceType;
        this.description = <any>args.description;
        this.documentRoot = <any>args.documentRoot;
        this.domains = <any>args.domains;
        this.enableSsl = <any>args.enableSsl;
        this.environment = <any>args.environment;
        this.name = <any>args.name;
        this.railsEnv = <any>args.railsEnv;
        this.shortName = <any>args.shortName;
        this.sslConfiguration = <any>args.sslConfiguration;
        if (lumirt.defaultIfComputed(args.stackId, "") === undefined) {
            throw new Error("Property argument 'stackId' is required, but was missing");
        }
        this.stackId = <any>args.stackId;
        if (lumirt.defaultIfComputed(args.type, "") === undefined) {
            throw new Error("Property argument 'type' is required, but was missing");
        }
        this.type = <any>args.type;
    }
}

export interface ApplicationArgs {
    readonly appSource?: { password?: string, revision?: string, sshKey?: string, type: string, url?: string, username?: string }[];
    readonly autoBundleOnDeploy?: string;
    readonly awsFlowRubySettings?: string;
    readonly dataSourceArn?: string;
    readonly dataSourceDatabaseName?: string;
    readonly dataSourceType?: string;
    readonly description?: string;
    readonly documentRoot?: string;
    readonly domains?: string[];
    readonly enableSsl?: boolean;
    readonly environment?: { key: string, secure?: boolean, value: string }[];
    readonly name?: string;
    readonly railsEnv?: string;
    readonly shortName?: string;
    readonly sslConfiguration?: { certificate: string, chain?: string, privateKey: string }[];
    readonly stackId: string;
    readonly type: string;
}

