// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Instance extends lumi.NamedResource implements InstanceArgs {
    public readonly agentVersion?: string;
    public readonly amiId: string;
    public readonly architecture?: string;
    public readonly autoScalingType?: string;
    public readonly availabilityZone: string;
    public readonly createdAt: string;
    public readonly deleteEbs?: boolean;
    public readonly deleteEip?: boolean;
    public readonly ebsBlockDevice: { deleteOnTermination?: boolean, deviceName: string, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    public readonly ebsOptimized?: boolean;
    public readonly ec2InstanceId: string;
    public readonly ecsClusterArn: string;
    public readonly elasticIp: string;
    public readonly ephemeralBlockDevice: { deviceName: string, virtualName: string }[];
    public readonly hostname: string;
    public /*out*/ readonly instanceId: string;
    public readonly infrastructureClass: string;
    public readonly installUpdatesOnBoot?: boolean;
    public readonly instanceProfileArn: string;
    public readonly instanceType?: string;
    public readonly lastServiceErrorId: string;
    public readonly layerIds: string[];
    public readonly os: string;
    public readonly platform: string;
    public readonly privateDns: string;
    public readonly privateIp: string;
    public readonly publicDns: string;
    public readonly publicIp: string;
    public readonly registeredBy: string;
    public readonly reportedAgentVersion: string;
    public readonly reportedOsFamily: string;
    public readonly reportedOsName: string;
    public readonly reportedOsVersion: string;
    public readonly rootBlockDevice: { deleteOnTermination?: boolean, iops: number, volumeSize: number, volumeType: string }[];
    public readonly rootDeviceType: string;
    public readonly rootDeviceVolumeId: string;
    public readonly securityGroupIds: string[];
    public readonly sshHostDsaKeyFingerprint: string;
    public readonly sshHostRsaKeyFingerprint: string;
    public readonly sshKeyName: string;
    public readonly stackId: string;
    public readonly state?: string;
    public readonly status: string;
    public readonly subnetId: string;
    public readonly tenancy: string;
    public readonly virtualizationType: string;

    public static get(id: lumi.ID): Instance {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Instance[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: InstanceArgs) {
        super(urnName);
        this.agentVersion = <any>args.agentVersion;
        this.amiId = <any>args.amiId;
        this.architecture = <any>args.architecture;
        this.autoScalingType = <any>args.autoScalingType;
        this.availabilityZone = <any>args.availabilityZone;
        this.createdAt = <any>args.createdAt;
        this.deleteEbs = <any>args.deleteEbs;
        this.deleteEip = <any>args.deleteEip;
        this.ebsBlockDevice = <any>args.ebsBlockDevice;
        this.ebsOptimized = <any>args.ebsOptimized;
        this.ec2InstanceId = <any>args.ec2InstanceId;
        this.ecsClusterArn = <any>args.ecsClusterArn;
        this.elasticIp = <any>args.elasticIp;
        this.ephemeralBlockDevice = <any>args.ephemeralBlockDevice;
        this.hostname = <any>args.hostname;
        this.infrastructureClass = <any>args.infrastructureClass;
        this.installUpdatesOnBoot = <any>args.installUpdatesOnBoot;
        this.instanceProfileArn = <any>args.instanceProfileArn;
        this.instanceType = <any>args.instanceType;
        this.lastServiceErrorId = <any>args.lastServiceErrorId;
        if (lumirt.defaultIfComputed(args.layerIds, "") === undefined) {
            throw new Error("Property argument 'layerIds' is required, but was missing");
        }
        this.layerIds = <any>args.layerIds;
        this.os = <any>args.os;
        this.platform = <any>args.platform;
        this.privateDns = <any>args.privateDns;
        this.privateIp = <any>args.privateIp;
        this.publicDns = <any>args.publicDns;
        this.publicIp = <any>args.publicIp;
        this.registeredBy = <any>args.registeredBy;
        this.reportedAgentVersion = <any>args.reportedAgentVersion;
        this.reportedOsFamily = <any>args.reportedOsFamily;
        this.reportedOsName = <any>args.reportedOsName;
        this.reportedOsVersion = <any>args.reportedOsVersion;
        this.rootBlockDevice = <any>args.rootBlockDevice;
        this.rootDeviceType = <any>args.rootDeviceType;
        this.rootDeviceVolumeId = <any>args.rootDeviceVolumeId;
        this.securityGroupIds = <any>args.securityGroupIds;
        this.sshHostDsaKeyFingerprint = <any>args.sshHostDsaKeyFingerprint;
        this.sshHostRsaKeyFingerprint = <any>args.sshHostRsaKeyFingerprint;
        this.sshKeyName = <any>args.sshKeyName;
        if (lumirt.defaultIfComputed(args.stackId, "") === undefined) {
            throw new Error("Property argument 'stackId' is required, but was missing");
        }
        this.stackId = <any>args.stackId;
        this.state = <any>args.state;
        this.status = <any>args.status;
        this.subnetId = <any>args.subnetId;
        this.tenancy = <any>args.tenancy;
        this.virtualizationType = <any>args.virtualizationType;
    }
}

export interface InstanceArgs {
    readonly agentVersion?: string;
    readonly amiId?: string;
    readonly architecture?: string;
    readonly autoScalingType?: string;
    readonly availabilityZone?: string;
    readonly createdAt?: string;
    readonly deleteEbs?: boolean;
    readonly deleteEip?: boolean;
    readonly ebsBlockDevice?: { deleteOnTermination?: boolean, deviceName: string, iops?: number, snapshotId?: string, volumeSize?: number, volumeType?: string }[];
    readonly ebsOptimized?: boolean;
    readonly ec2InstanceId?: string;
    readonly ecsClusterArn?: string;
    readonly elasticIp?: string;
    readonly ephemeralBlockDevice?: { deviceName: string, virtualName: string }[];
    readonly hostname?: string;
    readonly infrastructureClass?: string;
    readonly installUpdatesOnBoot?: boolean;
    readonly instanceProfileArn?: string;
    readonly instanceType?: string;
    readonly lastServiceErrorId?: string;
    readonly layerIds: string[];
    readonly os?: string;
    readonly platform?: string;
    readonly privateDns?: string;
    readonly privateIp?: string;
    readonly publicDns?: string;
    readonly publicIp?: string;
    readonly registeredBy?: string;
    readonly reportedAgentVersion?: string;
    readonly reportedOsFamily?: string;
    readonly reportedOsName?: string;
    readonly reportedOsVersion?: string;
    readonly rootBlockDevice?: { deleteOnTermination?: boolean, iops?: number, volumeSize?: number, volumeType?: string }[];
    readonly rootDeviceType?: string;
    readonly rootDeviceVolumeId?: string;
    readonly securityGroupIds?: string[];
    readonly sshHostDsaKeyFingerprint?: string;
    readonly sshHostRsaKeyFingerprint?: string;
    readonly sshKeyName?: string;
    readonly stackId: string;
    readonly state?: string;
    readonly status?: string;
    readonly subnetId?: string;
    readonly tenancy?: string;
    readonly virtualizationType?: string;
}

