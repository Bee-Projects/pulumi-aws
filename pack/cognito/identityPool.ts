// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class IdentityPool extends lumi.NamedResource implements IdentityPoolArgs {
    public readonly allowUnauthenticatedIdentities?: boolean;
    public readonly cognitoIdentityProviders?: { clientId?: string, providerName?: string, serverSideTokenCheck?: boolean }[];
    public readonly developerProviderName?: string;
    public readonly identityPoolName: string;
    public readonly openidConnectProviderArns?: string[];
    public readonly samlProviderArns?: string[];
    public readonly supportedLoginProviders?: {[key: string]: string};

    constructor(name: string, args: IdentityPoolArgs) {
        super(name);
        this.allowUnauthenticatedIdentities = args.allowUnauthenticatedIdentities;
        this.cognitoIdentityProviders = args.cognitoIdentityProviders;
        this.developerProviderName = args.developerProviderName;
        if (lumirt.defaultIfComputed(args.identityPoolName, "") === undefined) {
            throw new Error("Property argument 'identityPoolName' is required, but was missing");
        }
        this.identityPoolName = args.identityPoolName;
        this.openidConnectProviderArns = args.openidConnectProviderArns;
        this.samlProviderArns = args.samlProviderArns;
        this.supportedLoginProviders = args.supportedLoginProviders;
    }
}

export interface IdentityPoolArgs {
    readonly allowUnauthenticatedIdentities?: boolean;
    readonly cognitoIdentityProviders?: { clientId?: string, providerName?: string, serverSideTokenCheck?: boolean }[];
    readonly developerProviderName?: string;
    readonly identityPoolName: string;
    readonly openidConnectProviderArns?: string[];
    readonly samlProviderArns?: string[];
    readonly supportedLoginProviders?: {[key: string]: string};
}

