// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Trail extends lumi.NamedResource implements TrailArgs {
    public /*out*/ readonly arn: string;
    public readonly cloudWatchLogsGroupArn?: string;
    public readonly cloudWatchLogsRoleArn?: string;
    public readonly enableLogFileValidation?: boolean;
    public readonly enableLogging?: boolean;
    public /*out*/ readonly homeRegion: string;
    public readonly includeGlobalServiceEvents?: boolean;
    public readonly isMultiRegionTrail?: boolean;
    public readonly kmsKeyId?: string;
    public readonly trailName: string;
    public readonly s3BucketName: string;
    public readonly s3KeyPrefix?: string;
    public readonly snsTopicName?: string;
    public readonly tags?: {[key: string]: any};

    public static get(id: lumi.ID): Trail {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Trail[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: TrailArgs) {
        super(name);
        this.cloudWatchLogsGroupArn = <any>args.cloudWatchLogsGroupArn;
        this.cloudWatchLogsRoleArn = <any>args.cloudWatchLogsRoleArn;
        this.enableLogFileValidation = <any>args.enableLogFileValidation;
        this.enableLogging = <any>args.enableLogging;
        this.includeGlobalServiceEvents = <any>args.includeGlobalServiceEvents;
        this.isMultiRegionTrail = <any>args.isMultiRegionTrail;
        this.kmsKeyId = <any>args.kmsKeyId;
        this.trailName = <any>args.trailName;
        if (lumirt.defaultIfComputed(args.s3BucketName, "") === undefined) {
            throw new Error("Property argument 's3BucketName' is required, but was missing");
        }
        this.s3BucketName = <any>args.s3BucketName;
        this.s3KeyPrefix = <any>args.s3KeyPrefix;
        this.snsTopicName = <any>args.snsTopicName;
        this.tags = <any>args.tags;
    }
}

export interface TrailArgs {
    readonly cloudWatchLogsGroupArn?: string;
    readonly cloudWatchLogsRoleArn?: string;
    readonly enableLogFileValidation?: boolean;
    readonly enableLogging?: boolean;
    readonly includeGlobalServiceEvents?: boolean;
    readonly isMultiRegionTrail?: boolean;
    readonly kmsKeyId?: string;
    readonly trailName?: string;
    readonly s3BucketName: string;
    readonly s3KeyPrefix?: string;
    readonly snsTopicName?: string;
    readonly tags?: {[key: string]: any};
}

