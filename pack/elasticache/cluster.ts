// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

export class Cluster extends fabric.Resource {
    public readonly applyImmediately: fabric.Property<boolean>;
    public readonly availabilityZone: fabric.Property<string>;
    public readonly availabilityZones?: fabric.Property<string[]>;
    public readonly azMode: fabric.Property<string>;
    public /*out*/ readonly cacheNodes: fabric.Property<{ address: string, availabilityZone: string, id: string, port: number }[]>;
    public /*out*/ readonly clusterAddress: fabric.Property<string>;
    public readonly clusterId: fabric.Property<string>;
    public /*out*/ readonly configurationEndpoint: fabric.Property<string>;
    public readonly engine: fabric.Property<string>;
    public readonly engineVersion: fabric.Property<string>;
    public readonly maintenanceWindow: fabric.Property<string>;
    public readonly nodeType: fabric.Property<string>;
    public readonly notificationTopicArn?: fabric.Property<string>;
    public readonly numCacheNodes: fabric.Property<number>;
    public readonly parameterGroupName: fabric.Property<string>;
    public readonly port: fabric.Property<number>;
    public /*out*/ readonly replicationGroupId: fabric.Property<string>;
    public readonly securityGroupIds: fabric.Property<string[]>;
    public readonly securityGroupNames: fabric.Property<string[]>;
    public readonly snapshotArns?: fabric.Property<string[]>;
    public readonly snapshotName?: fabric.Property<string>;
    public readonly snapshotRetentionLimit?: fabric.Property<number>;
    public readonly snapshotWindow: fabric.Property<string>;
    public readonly subnetGroupName: fabric.Property<string>;
    public readonly tags?: fabric.Property<{[key: string]: any}>;

    constructor(urnName: string, args: ClusterArgs) {
        if (args.clusterId === undefined) {
            throw new Error("Missing required property 'clusterId'");
        }
        if (args.engine === undefined) {
            throw new Error("Missing required property 'engine'");
        }
        if (args.nodeType === undefined) {
            throw new Error("Missing required property 'nodeType'");
        }
        if (args.numCacheNodes === undefined) {
            throw new Error("Missing required property 'numCacheNodes'");
        }
        if (args.port === undefined) {
            throw new Error("Missing required property 'port'");
        }
        super("aws:elasticache/cluster:Cluster", urnName, {
            "applyImmediately": args.applyImmediately,
            "availabilityZone": args.availabilityZone,
            "availabilityZones": args.availabilityZones,
            "azMode": args.azMode,
            "clusterId": args.clusterId,
            "engine": args.engine,
            "engineVersion": args.engineVersion,
            "maintenanceWindow": args.maintenanceWindow,
            "nodeType": args.nodeType,
            "notificationTopicArn": args.notificationTopicArn,
            "numCacheNodes": args.numCacheNodes,
            "parameterGroupName": args.parameterGroupName,
            "port": args.port,
            "securityGroupIds": args.securityGroupIds,
            "securityGroupNames": args.securityGroupNames,
            "snapshotArns": args.snapshotArns,
            "snapshotName": args.snapshotName,
            "snapshotRetentionLimit": args.snapshotRetentionLimit,
            "snapshotWindow": args.snapshotWindow,
            "subnetGroupName": args.subnetGroupName,
            "tags": args.tags,
            "cacheNodes": undefined,
            "clusterAddress": undefined,
            "configurationEndpoint": undefined,
            "replicationGroupId": undefined,
        });
    }
}

export interface ClusterArgs {
    readonly applyImmediately?: fabric.PropertyValue<boolean>;
    readonly availabilityZone?: fabric.PropertyValue<string>;
    readonly availabilityZones?: fabric.PropertyValue<fabric.PropertyValue<string>>[];
    readonly azMode?: fabric.PropertyValue<string>;
    readonly clusterId: fabric.PropertyValue<string>;
    readonly engine: fabric.PropertyValue<string>;
    readonly engineVersion?: fabric.PropertyValue<string>;
    readonly maintenanceWindow?: fabric.PropertyValue<string>;
    readonly nodeType: fabric.PropertyValue<string>;
    readonly notificationTopicArn?: fabric.PropertyValue<string>;
    readonly numCacheNodes: fabric.PropertyValue<number>;
    readonly parameterGroupName?: fabric.PropertyValue<string>;
    readonly port: fabric.PropertyValue<number>;
    readonly securityGroupIds?: fabric.PropertyValue<fabric.PropertyValue<string>>[];
    readonly securityGroupNames?: fabric.PropertyValue<fabric.PropertyValue<string>>[];
    readonly snapshotArns?: fabric.PropertyValue<fabric.PropertyValue<string>>[];
    readonly snapshotName?: fabric.PropertyValue<string>;
    readonly snapshotRetentionLimit?: fabric.PropertyValue<number>;
    readonly snapshotWindow?: fabric.PropertyValue<string>;
    readonly subnetGroupName?: fabric.PropertyValue<string>;
    readonly tags?: fabric.PropertyValue<{[key: string]: any}>;
}

