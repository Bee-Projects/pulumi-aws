// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class MountTarget extends lumi.NamedResource implements MountTargetArgs {
    public /*out*/ readonly dnsName: string;
    public readonly fileSystemId: string;
    public readonly ipAddress: string;
    public /*out*/ readonly networkInterfaceId: string;
    public readonly securityGroups: string[];
    public readonly subnetId: string;

    public static get(id: lumi.ID): MountTarget {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): MountTarget[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: MountTargetArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.fileSystemId, "") === undefined) {
            throw new Error("Property argument 'fileSystemId' is required, but was missing");
        }
        this.fileSystemId = <any>args.fileSystemId;
        this.ipAddress = <any>args.ipAddress;
        this.securityGroups = <any>args.securityGroups;
        if (lumirt.defaultIfComputed(args.subnetId, "") === undefined) {
            throw new Error("Property argument 'subnetId' is required, but was missing");
        }
        this.subnetId = <any>args.subnetId;
    }
}

export interface MountTargetArgs {
    readonly fileSystemId: string;
    readonly ipAddress?: string;
    readonly securityGroups?: string[];
    readonly subnetId: string;
}

