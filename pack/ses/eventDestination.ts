// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class EventDestination extends lumi.NamedResource implements EventDestinationArgs {
    public readonly cloudwatchDestination?: { defaultValue: string, dimensionName: string, valueSource: string }[];
    public readonly configurationSetName: string;
    public readonly enabled?: boolean;
    public readonly kinesisDestination?: { roleArn: string, streamArn: string }[];
    public readonly matchingTypes: string[];
    public readonly name: string;

    public static get(id: lumi.ID): EventDestination {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): EventDestination[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: EventDestinationArgs) {
        super(urnName);
        this.cloudwatchDestination = <any>args.cloudwatchDestination;
        if (lumirt.defaultIfComputed(args.configurationSetName, "") === undefined) {
            throw new Error("Property argument 'configurationSetName' is required, but was missing");
        }
        this.configurationSetName = <any>args.configurationSetName;
        this.enabled = <any>args.enabled;
        this.kinesisDestination = <any>args.kinesisDestination;
        if (lumirt.defaultIfComputed(args.matchingTypes, "") === undefined) {
            throw new Error("Property argument 'matchingTypes' is required, but was missing");
        }
        this.matchingTypes = <any>args.matchingTypes;
        this.name = <any>args.name;
    }
}

export interface EventDestinationArgs {
    readonly cloudwatchDestination?: { defaultValue: string, dimensionName: string, valueSource: string }[];
    readonly configurationSetName: string;
    readonly enabled?: boolean;
    readonly kinesisDestination?: { roleArn: string, streamArn: string }[];
    readonly matchingTypes: string[];
    readonly name?: string;
}

