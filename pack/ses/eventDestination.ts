// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class EventDestination extends lumi.NamedResource implements EventDestinationArgs {
    public readonly cloudwatchDestination?: { defaultValue: string, dimensionName: string, valueSource: string }[];
    public readonly configurationSetName: string;
    public readonly enabled?: boolean;
    public readonly kinesisDestination?: { roleArn: string, streamArn: string }[];
    public readonly matchingTypes: string[];
    public readonly eventDestinationName?: string;

    constructor(name: string, args: EventDestinationArgs) {
        super(name);
        this.cloudwatchDestination = args.cloudwatchDestination;
        if (lumirt.defaultIfComputed(args.configurationSetName, "") === undefined) {
            throw new Error("Property argument 'configurationSetName' is required, but was missing");
        }
        this.configurationSetName = args.configurationSetName;
        this.enabled = args.enabled;
        this.kinesisDestination = args.kinesisDestination;
        if (lumirt.defaultIfComputed(args.matchingTypes, "") === undefined) {
            throw new Error("Property argument 'matchingTypes' is required, but was missing");
        }
        this.matchingTypes = args.matchingTypes;
        this.eventDestinationName = args.eventDestinationName;
    }
}

export interface EventDestinationArgs {
    readonly cloudwatchDestination?: { defaultValue: string, dimensionName: string, valueSource: string }[];
    readonly configurationSetName: string;
    readonly enabled?: boolean;
    readonly kinesisDestination?: { roleArn: string, streamArn: string }[];
    readonly matchingTypes: string[];
    readonly eventDestinationName?: string;
}

