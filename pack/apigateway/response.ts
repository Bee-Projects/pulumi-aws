// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Response extends lumi.NamedResource implements ResponseArgs {
    public readonly responseParameters?: {[key: string]: string};
    public readonly responseTemplates?: {[key: string]: string};
    public readonly responseType: string;
    public readonly restApiId: string;
    public readonly statusCode?: string;

    public static get(id: lumi.ID): Response {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Response[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: ResponseArgs) {
        super(name);
        this.responseParameters = args.responseParameters;
        this.responseTemplates = args.responseTemplates;
        if (lumirt.defaultIfComputed(args.responseType, "") === undefined) {
            throw new Error("Property argument 'responseType' is required, but was missing");
        }
        this.responseType = args.responseType;
        if (lumirt.defaultIfComputed(args.restApiId, "") === undefined) {
            throw new Error("Property argument 'restApiId' is required, but was missing");
        }
        this.restApiId = args.restApiId;
        this.statusCode = args.statusCode;
    }
}

export interface ResponseArgs {
    readonly responseParameters?: {[key: string]: string};
    readonly responseTemplates?: {[key: string]: string};
    readonly responseType: string;
    readonly restApiId: string;
    readonly statusCode?: string;
}

