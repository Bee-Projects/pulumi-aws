// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {Resource} from "./resource";
import {RestApi} from "./restApi";

export class IntegrationResponse extends lumi.NamedResource implements IntegrationResponseArgs {
    public readonly contentHandling?: string;
    public readonly httpMethod: string;
    public readonly resource: Resource;
    public readonly responseParameters?: {[key: string]: string};
    public readonly responseParametersInJson?: string;
    public readonly responseTemplates?: {[key: string]: string};
    public readonly restApi: RestApi;
    public readonly selectionPattern?: string;
    public readonly statusCode: string;

    constructor(name: string, args: IntegrationResponseArgs) {
        super(name);
        this.contentHandling = args.contentHandling;
        if (lumirt.defaultIfComputed(args.httpMethod, "") === undefined) {
            throw new Error("Property argument 'httpMethod' is required, but was missing");
        }
        this.httpMethod = args.httpMethod;
        if (lumirt.defaultIfComputed(args.resource, "") === undefined) {
            throw new Error("Property argument 'resource' is required, but was missing");
        }
        this.resource = args.resource;
        this.responseParameters = args.responseParameters;
        this.responseParametersInJson = args.responseParametersInJson;
        this.responseTemplates = args.responseTemplates;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = args.restApi;
        this.selectionPattern = args.selectionPattern;
        if (lumirt.defaultIfComputed(args.statusCode, "") === undefined) {
            throw new Error("Property argument 'statusCode' is required, but was missing");
        }
        this.statusCode = args.statusCode;
    }
}

export interface IntegrationResponseArgs {
    readonly contentHandling?: string;
    readonly httpMethod: string;
    readonly resource: Resource;
    readonly responseParameters?: {[key: string]: string};
    readonly responseParametersInJson?: string;
    readonly responseTemplates?: {[key: string]: string};
    readonly restApi: RestApi;
    readonly selectionPattern?: string;
    readonly statusCode: string;
}

