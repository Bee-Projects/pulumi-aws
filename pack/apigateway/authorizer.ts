// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {RestApi} from "./restApi";

export class Authorizer extends lumi.NamedResource implements AuthorizerArgs {
    public readonly authorizerCredentials?: string;
    public readonly authorizerResultTtlInSeconds?: number;
    public readonly authorizerUri: string;
    public readonly identitySource?: string;
    public readonly identityValidationExpression?: string;
    public readonly authorizerName?: string;
    public readonly restApi: RestApi;
    public readonly type?: string;

    public static get(id: lumi.ID): Authorizer {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Authorizer[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: AuthorizerArgs) {
        super(name);
        this.authorizerCredentials = args.authorizerCredentials;
        this.authorizerResultTtlInSeconds = args.authorizerResultTtlInSeconds;
        if (lumirt.defaultIfComputed(args.authorizerUri, "") === undefined) {
            throw new Error("Property argument 'authorizerUri' is required, but was missing");
        }
        this.authorizerUri = args.authorizerUri;
        this.identitySource = args.identitySource;
        this.identityValidationExpression = args.identityValidationExpression;
        this.authorizerName = args.authorizerName;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = args.restApi;
        this.type = args.type;
    }
}

export interface AuthorizerArgs {
    readonly authorizerCredentials?: string;
    readonly authorizerResultTtlInSeconds?: number;
    readonly authorizerUri: string;
    readonly identitySource?: string;
    readonly identityValidationExpression?: string;
    readonly authorizerName?: string;
    readonly restApi: RestApi;
    readonly type?: string;
}

