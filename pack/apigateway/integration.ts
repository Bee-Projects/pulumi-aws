// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {RestApi} from "./restApi";

export class Integration extends lumi.NamedResource implements IntegrationArgs {
    public readonly cacheKeyParameters?: string[];
    public readonly cacheNamespace: string;
    public readonly contentHandling?: string;
    public readonly credentials?: string;
    public readonly httpMethod: string;
    public readonly integrationHttpMethod?: string;
    public readonly passthroughBehavior: string;
    public readonly requestParameters?: {[key: string]: string};
    public readonly requestParametersInJson?: string;
    public readonly requestTemplates?: {[key: string]: string};
    public readonly resourceId: string;
    public readonly restApi: RestApi;
    public readonly type: string;
    public readonly uri?: string;

    public static get(id: lumi.ID): Integration {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Integration[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: IntegrationArgs) {
        super(urnName);
        this.cacheKeyParameters = <any>args.cacheKeyParameters;
        this.cacheNamespace = <any>args.cacheNamespace;
        this.contentHandling = <any>args.contentHandling;
        this.credentials = <any>args.credentials;
        if (lumirt.defaultIfComputed(args.httpMethod, "") === undefined) {
            throw new Error("Property argument 'httpMethod' is required, but was missing");
        }
        this.httpMethod = <any>args.httpMethod;
        this.integrationHttpMethod = <any>args.integrationHttpMethod;
        this.passthroughBehavior = <any>args.passthroughBehavior;
        this.requestParameters = <any>args.requestParameters;
        this.requestParametersInJson = <any>args.requestParametersInJson;
        this.requestTemplates = <any>args.requestTemplates;
        if (lumirt.defaultIfComputed(args.resourceId, "") === undefined) {
            throw new Error("Property argument 'resourceId' is required, but was missing");
        }
        this.resourceId = <any>args.resourceId;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = <any>args.restApi;
        if (lumirt.defaultIfComputed(args.type, "") === undefined) {
            throw new Error("Property argument 'type' is required, but was missing");
        }
        this.type = <any>args.type;
        this.uri = <any>args.uri;
    }
}

export interface IntegrationArgs {
    readonly cacheKeyParameters?: string[];
    readonly cacheNamespace?: string;
    readonly contentHandling?: string;
    readonly credentials?: string;
    readonly httpMethod: string;
    readonly integrationHttpMethod?: string;
    readonly passthroughBehavior?: string;
    readonly requestParameters?: {[key: string]: string};
    readonly requestParametersInJson?: string;
    readonly requestTemplates?: {[key: string]: string};
    readonly resourceId: string;
    readonly restApi: RestApi;
    readonly type: string;
    readonly uri?: string;
}

