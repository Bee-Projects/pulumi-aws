// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {Deployment} from "./deployment";
import {RestApi} from "./restApi";

export class Stage extends lumi.NamedResource implements StageArgs {
    public readonly cacheClusterEnabled?: boolean;
    public readonly cacheClusterSize?: string;
    public readonly clientCertificateId?: string;
    public readonly deployment: Deployment;
    public readonly description?: string;
    public readonly documentationVersion?: string;
    public readonly restApi: RestApi;
    public readonly stageName: string;
    public readonly variables?: {[key: string]: any};

    public static get(id: lumi.ID): Stage {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Stage[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: StageArgs) {
        super(urnName);
        this.cacheClusterEnabled = <any>args.cacheClusterEnabled;
        this.cacheClusterSize = <any>args.cacheClusterSize;
        this.clientCertificateId = <any>args.clientCertificateId;
        if (lumirt.defaultIfComputed(args.deployment, "") === undefined) {
            throw new Error("Property argument 'deployment' is required, but was missing");
        }
        this.deployment = <any>args.deployment;
        this.description = <any>args.description;
        this.documentationVersion = <any>args.documentationVersion;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = <any>args.restApi;
        if (lumirt.defaultIfComputed(args.stageName, "") === undefined) {
            throw new Error("Property argument 'stageName' is required, but was missing");
        }
        this.stageName = <any>args.stageName;
        this.variables = <any>args.variables;
    }
}

export interface StageArgs {
    readonly cacheClusterEnabled?: boolean;
    readonly cacheClusterSize?: string;
    readonly clientCertificateId?: string;
    readonly deployment: Deployment;
    readonly description?: string;
    readonly documentationVersion?: string;
    readonly restApi: RestApi;
    readonly stageName: string;
    readonly variables?: {[key: string]: any};
}

