// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {RestApi} from "./restApi";

export class Deployment extends lumi.NamedResource implements DeploymentArgs {
    public /*out*/ readonly createdDate: string;
    public readonly description?: string;
    public /*out*/ readonly executionArn: string;
    public /*out*/ readonly invokeUrl: string;
    public readonly restApi: RestApi;
    public readonly stageDescription?: string;
    public readonly stageName: string;
    public readonly variables?: {[key: string]: string};

    public static get(id: lumi.ID): Deployment {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Deployment[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: DeploymentArgs) {
        super(name);
        this.description = <any>args.description;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = <any>args.restApi;
        this.stageDescription = <any>args.stageDescription;
        if (lumirt.defaultIfComputed(args.stageName, "") === undefined) {
            throw new Error("Property argument 'stageName' is required, but was missing");
        }
        this.stageName = <any>args.stageName;
        this.variables = <any>args.variables;
    }
}

export interface DeploymentArgs {
    readonly description?: string;
    readonly restApi: RestApi;
    readonly stageDescription?: string;
    readonly stageName: string;
    readonly variables?: {[key: string]: string};
}

