// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {RestApi} from "./restApi";

export class Model extends lumi.NamedResource implements ModelArgs {
    public readonly contentType: string;
    public readonly description?: string;
    public readonly name: string;
    public readonly restApi: RestApi;
    public readonly schema?: string;

    public static get(id: lumi.ID): Model {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Model[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: ModelArgs) {
        super(urnName);
        if (lumirt.defaultIfComputed(args.contentType, "") === undefined) {
            throw new Error("Property argument 'contentType' is required, but was missing");
        }
        this.contentType = <any>args.contentType;
        this.description = <any>args.description;
        this.name = <any>args.name;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = <any>args.restApi;
        this.schema = <any>args.schema;
    }
}

export interface ModelArgs {
    readonly contentType: string;
    readonly description?: string;
    readonly name?: string;
    readonly restApi: RestApi;
    readonly schema?: string;
}

