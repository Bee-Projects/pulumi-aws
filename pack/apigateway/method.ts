// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {RestApi} from "./restApi";

export class Method extends lumi.NamedResource implements MethodArgs {
    public readonly apiKeyRequired?: boolean;
    public readonly authorization: string;
    public readonly authorizerId?: string;
    public readonly httpMethod: string;
    public readonly requestModels?: {[key: string]: string};
    public readonly requestParameters?: {[key: string]: boolean};
    public readonly requestParametersInJson?: string;
    public readonly requestValidatorId?: string;
    public readonly resourceId: string;
    public readonly restApi: RestApi;

    public static get(id: lumi.ID): Method {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Method[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: MethodArgs) {
        super(name);
        this.apiKeyRequired = <any>args.apiKeyRequired;
        if (lumirt.defaultIfComputed(args.authorization, "") === undefined) {
            throw new Error("Property argument 'authorization' is required, but was missing");
        }
        this.authorization = <any>args.authorization;
        this.authorizerId = <any>args.authorizerId;
        if (lumirt.defaultIfComputed(args.httpMethod, "") === undefined) {
            throw new Error("Property argument 'httpMethod' is required, but was missing");
        }
        this.httpMethod = <any>args.httpMethod;
        this.requestModels = <any>args.requestModels;
        this.requestParameters = <any>args.requestParameters;
        this.requestParametersInJson = <any>args.requestParametersInJson;
        this.requestValidatorId = <any>args.requestValidatorId;
        if (lumirt.defaultIfComputed(args.resourceId, "") === undefined) {
            throw new Error("Property argument 'resourceId' is required, but was missing");
        }
        this.resourceId = <any>args.resourceId;
        if (lumirt.defaultIfComputed(args.restApi, "") === undefined) {
            throw new Error("Property argument 'restApi' is required, but was missing");
        }
        this.restApi = <any>args.restApi;
    }
}

export interface MethodArgs {
    readonly apiKeyRequired?: boolean;
    readonly authorization: string;
    readonly authorizerId?: string;
    readonly httpMethod: string;
    readonly requestModels?: {[key: string]: string};
    readonly requestParameters?: {[key: string]: boolean};
    readonly requestParametersInJson?: string;
    readonly requestValidatorId?: string;
    readonly resourceId: string;
    readonly restApi: RestApi;
}

