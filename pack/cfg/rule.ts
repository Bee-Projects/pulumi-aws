// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Rule extends lumi.NamedResource implements RuleArgs {
    public /*out*/ readonly arn: string;
    public readonly description?: string;
    public readonly inputParameters?: string;
    public readonly maximumExecutionFrequency?: string;
    public readonly ruleName?: string;
    public /*out*/ readonly ruleId: string;
    public readonly scope?: { complianceResourceId?: string, complianceResourceTypes?: string[], tagKey?: string, tagValue?: string }[];
    public readonly source: { owner: string, sourceDetail?: { eventSource?: string, maximumExecutionFrequency?: string, messageType?: string }[], sourceIdentifier: string }[];

    constructor(name: string, args: RuleArgs) {
        super(name);
        this.description = args.description;
        this.inputParameters = args.inputParameters;
        this.maximumExecutionFrequency = args.maximumExecutionFrequency;
        this.ruleName = args.ruleName;
        this.scope = args.scope;
        if (lumirt.defaultIfComputed(args.source, "") === undefined) {
            throw new Error("Property argument 'source' is required, but was missing");
        }
        this.source = args.source;
    }
}

export interface RuleArgs {
    readonly description?: string;
    readonly inputParameters?: string;
    readonly maximumExecutionFrequency?: string;
    readonly ruleName?: string;
    readonly scope?: { complianceResourceId?: string, complianceResourceTypes?: string[], tagKey?: string, tagValue?: string }[];
    readonly source: { owner: string, sourceDetail?: { eventSource?: string, maximumExecutionFrequency?: string, messageType?: string }[], sourceIdentifier: string }[];
}

