// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Record extends lumi.NamedResource implements RecordArgs {
    public readonly alias?: { evaluateTargetHealth: boolean, name: string, zoneId: string }[];
    public readonly failoverRoutingPolicy?: { type: string }[];
    public /*out*/ readonly fqdn: string;
    public readonly geolocationRoutingPolicy?: { continent?: string, country?: string, subdivision?: string }[];
    public readonly healthCheckId?: string;
    public readonly latencyRoutingPolicy?: { region: string }[];
    public readonly recordName?: string;
    public readonly records?: string[];
    public readonly setIdentifier?: string;
    public readonly ttl?: number;
    public readonly type: string;
    public readonly weightedRoutingPolicy?: { weight: number }[];
    public readonly zoneId: string;

    constructor(name: string, args: RecordArgs) {
        super(name);
        this.alias = args.alias;
        this.failoverRoutingPolicy = args.failoverRoutingPolicy;
        this.geolocationRoutingPolicy = args.geolocationRoutingPolicy;
        this.healthCheckId = args.healthCheckId;
        this.latencyRoutingPolicy = args.latencyRoutingPolicy;
        this.recordName = args.recordName;
        this.records = args.records;
        this.setIdentifier = args.setIdentifier;
        this.ttl = args.ttl;
        if (lumirt.defaultIfComputed(args.type, "") === undefined) {
            throw new Error("Property argument 'type' is required, but was missing");
        }
        this.type = args.type;
        this.weightedRoutingPolicy = args.weightedRoutingPolicy;
        if (lumirt.defaultIfComputed(args.zoneId, "") === undefined) {
            throw new Error("Property argument 'zoneId' is required, but was missing");
        }
        this.zoneId = args.zoneId;
    }
}

export interface RecordArgs {
    readonly alias?: { evaluateTargetHealth: boolean, name: string, zoneId: string }[];
    readonly failoverRoutingPolicy?: { type: string }[];
    readonly geolocationRoutingPolicy?: { continent?: string, country?: string, subdivision?: string }[];
    readonly healthCheckId?: string;
    readonly latencyRoutingPolicy?: { region: string }[];
    readonly recordName?: string;
    readonly records?: string[];
    readonly setIdentifier?: string;
    readonly ttl?: number;
    readonly type: string;
    readonly weightedRoutingPolicy?: { weight: number }[];
    readonly zoneId: string;
}

