// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class SshKey extends lumi.NamedResource implements SshKeyArgs {
    public readonly encoding: string;
    public /*out*/ readonly fingerprint: string;
    public readonly publicKey: string;
    public /*out*/ readonly sshPublicKeyId: string;
    public readonly status: string;
    public readonly username: string;

    public static get(id: lumi.ID): SshKey {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): SshKey[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: SshKeyArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.encoding, "") === undefined) {
            throw new Error("Property argument 'encoding' is required, but was missing");
        }
        this.encoding = <any>args.encoding;
        if (lumirt.defaultIfComputed(args.publicKey, "") === undefined) {
            throw new Error("Property argument 'publicKey' is required, but was missing");
        }
        this.publicKey = <any>args.publicKey;
        this.status = <any>args.status;
        if (lumirt.defaultIfComputed(args.username, "") === undefined) {
            throw new Error("Property argument 'username' is required, but was missing");
        }
        this.username = <any>args.username;
    }
}

export interface SshKeyArgs {
    readonly encoding: string;
    readonly publicKey: string;
    readonly status?: string;
    readonly username: string;
}

