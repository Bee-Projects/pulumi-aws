// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Stack extends lumi.NamedResource implements StackArgs {
    public readonly capabilities?: string[];
    public readonly disableRollback?: boolean;
    public readonly iamRoleArn?: string;
    public readonly name: string;
    public readonly notificationArns?: string[];
    public readonly onFailure?: string;
    public /*out*/ readonly outputs: {[key: string]: any};
    public readonly parameters: {[key: string]: any};
    public readonly policyBody: string;
    public readonly policyUrl?: string;
    public readonly tags?: {[key: string]: any};
    public readonly templateBody: string;
    public readonly templateUrl?: string;
    public readonly timeoutInMinutes?: number;

    public static get(id: lumi.ID): Stack {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Stack[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: StackArgs) {
        super(urnName);
        this.capabilities = <any>args.capabilities;
        this.disableRollback = <any>args.disableRollback;
        this.iamRoleArn = <any>args.iamRoleArn;
        this.name = <any>args.name;
        this.notificationArns = <any>args.notificationArns;
        this.onFailure = <any>args.onFailure;
        this.parameters = <any>args.parameters;
        this.policyBody = <any>args.policyBody;
        this.policyUrl = <any>args.policyUrl;
        this.tags = <any>args.tags;
        this.templateBody = <any>args.templateBody;
        this.templateUrl = <any>args.templateUrl;
        this.timeoutInMinutes = <any>args.timeoutInMinutes;
    }
}

export interface StackArgs {
    readonly capabilities?: string[];
    readonly disableRollback?: boolean;
    readonly iamRoleArn?: string;
    readonly name?: string;
    readonly notificationArns?: string[];
    readonly onFailure?: string;
    readonly parameters?: {[key: string]: any};
    readonly policyBody?: string;
    readonly policyUrl?: string;
    readonly tags?: {[key: string]: any};
    readonly templateBody?: string;
    readonly templateUrl?: string;
    readonly timeoutInMinutes?: number;
}

