// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Cluster extends lumi.NamedResource implements ClusterArgs {
    public readonly applyImmediately: boolean;
    public readonly availabilityZones: string[];
    public readonly backupRetentionPeriod?: number;
    public readonly clusterIdentifier: string;
    public readonly clusterIdentifierPrefix: string;
    public readonly clusterMembers: string[];
    public /*out*/ readonly clusterResourceId: string;
    public readonly databaseName: string;
    public readonly dbClusterParameterGroupName: string;
    public readonly dbSubnetGroupName: string;
    public /*out*/ readonly endpoint: string;
    public /*out*/ readonly engine: string;
    public readonly finalSnapshotIdentifier?: string;
    public readonly iamDatabaseAuthenticationEnabled?: boolean;
    public readonly kmsKeyId: string;
    public readonly masterPassword?: string;
    public readonly masterUsername: string;
    public readonly port: number;
    public readonly preferredBackupWindow: string;
    public readonly preferredMaintenanceWindow: string;
    public /*out*/ readonly readerEndpoint: string;
    public readonly replicationSourceIdentifier?: string;
    public readonly skipFinalSnapshot?: boolean;
    public readonly snapshotIdentifier?: string;
    public readonly storageEncrypted?: boolean;
    public readonly tags?: {[key: string]: any};
    public readonly vpcSecurityGroupIds: string[];

    public static get(id: lumi.ID): Cluster {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Cluster[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: ClusterArgs) {
        super(urnName);
        this.applyImmediately = <any>args.applyImmediately;
        this.availabilityZones = <any>args.availabilityZones;
        this.backupRetentionPeriod = <any>args.backupRetentionPeriod;
        this.clusterIdentifier = <any>args.clusterIdentifier;
        this.clusterIdentifierPrefix = <any>args.clusterIdentifierPrefix;
        this.clusterMembers = <any>args.clusterMembers;
        this.databaseName = <any>args.databaseName;
        this.dbClusterParameterGroupName = <any>args.dbClusterParameterGroupName;
        this.dbSubnetGroupName = <any>args.dbSubnetGroupName;
        this.finalSnapshotIdentifier = <any>args.finalSnapshotIdentifier;
        this.iamDatabaseAuthenticationEnabled = <any>args.iamDatabaseAuthenticationEnabled;
        this.kmsKeyId = <any>args.kmsKeyId;
        this.masterPassword = <any>args.masterPassword;
        this.masterUsername = <any>args.masterUsername;
        this.port = <any>args.port;
        this.preferredBackupWindow = <any>args.preferredBackupWindow;
        this.preferredMaintenanceWindow = <any>args.preferredMaintenanceWindow;
        this.replicationSourceIdentifier = <any>args.replicationSourceIdentifier;
        this.skipFinalSnapshot = <any>args.skipFinalSnapshot;
        this.snapshotIdentifier = <any>args.snapshotIdentifier;
        this.storageEncrypted = <any>args.storageEncrypted;
        this.tags = <any>args.tags;
        this.vpcSecurityGroupIds = <any>args.vpcSecurityGroupIds;
    }
}

export interface ClusterArgs {
    readonly applyImmediately?: boolean;
    readonly availabilityZones?: string[];
    readonly backupRetentionPeriod?: number;
    readonly clusterIdentifier?: string;
    readonly clusterIdentifierPrefix?: string;
    readonly clusterMembers?: string[];
    readonly databaseName?: string;
    readonly dbClusterParameterGroupName?: string;
    readonly dbSubnetGroupName?: string;
    readonly finalSnapshotIdentifier?: string;
    readonly iamDatabaseAuthenticationEnabled?: boolean;
    readonly kmsKeyId?: string;
    readonly masterPassword?: string;
    readonly masterUsername?: string;
    readonly port?: number;
    readonly preferredBackupWindow?: string;
    readonly preferredMaintenanceWindow?: string;
    readonly replicationSourceIdentifier?: string;
    readonly skipFinalSnapshot?: boolean;
    readonly snapshotIdentifier?: string;
    readonly storageEncrypted?: boolean;
    readonly tags?: {[key: string]: any};
    readonly vpcSecurityGroupIds?: string[];
}

