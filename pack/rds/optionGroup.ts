// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class OptionGroup extends lumi.NamedResource implements OptionGroupArgs {
    public /*out*/ readonly arn: string;
    public readonly engineName: string;
    public readonly majorEngineVersion: string;
    public readonly optionGroupName: string;
    public readonly namePrefix: string;
    public readonly option?: { dbSecurityGroupMemberships?: string[], optionName: string, optionSettings?: { name: string, value: string }[], port?: number, vpcSecurityGroupMemberships?: string[] }[];
    public readonly optionGroupDescription?: string;
    public readonly tags?: {[key: string]: any};

    constructor(name: string, args: OptionGroupArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.engineName, "") === undefined) {
            throw new Error("Property argument 'engineName' is required, but was missing");
        }
        this.engineName = args.engineName;
        if (lumirt.defaultIfComputed(args.majorEngineVersion, "") === undefined) {
            throw new Error("Property argument 'majorEngineVersion' is required, but was missing");
        }
        this.majorEngineVersion = args.majorEngineVersion;
        this.optionGroupName = args.optionGroupName;
        this.namePrefix = args.namePrefix;
        this.option = args.option;
        this.optionGroupDescription = args.optionGroupDescription;
        this.tags = args.tags;
    }
}

export interface OptionGroupArgs {
    readonly engineName: string;
    readonly majorEngineVersion: string;
    readonly optionGroupName?: string;
    readonly namePrefix?: string;
    readonly option?: { dbSecurityGroupMemberships?: string[], optionName: string, optionSettings?: { name: string, value: string }[], port?: number, vpcSecurityGroupMemberships?: string[] }[];
    readonly optionGroupDescription?: string;
    readonly tags?: {[key: string]: any};
}

