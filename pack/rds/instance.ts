// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Instance extends lumi.NamedResource implements InstanceArgs {
    public /*out*/ readonly address: string;
    public readonly allocatedStorage: number;
    public readonly allowMajorVersionUpgrade?: boolean;
    public readonly applyImmediately: boolean;
    public /*out*/ readonly arn: string;
    public readonly autoMinorVersionUpgrade?: boolean;
    public readonly availabilityZone: string;
    public readonly backupRetentionPeriod: number;
    public readonly backupWindow: string;
    public readonly characterSetName: string;
    public readonly copyTagsToSnapshot?: boolean;
    public readonly dbSubnetGroupName: string;
    public /*out*/ readonly endpoint: string;
    public readonly engine: string;
    public readonly engineVersion: string;
    public readonly finalSnapshotIdentifier?: string;
    public /*out*/ readonly hostedZoneId: string;
    public readonly iamDatabaseAuthenticationEnabled?: boolean;
    public readonly identifier: string;
    public readonly identifierPrefix: string;
    public readonly instanceClass: string;
    public readonly iops?: number;
    public readonly kmsKeyId: string;
    public readonly licenseModel: string;
    public readonly maintenanceWindow: string;
    public readonly monitoringInterval?: number;
    public readonly monitoringRoleArn: string;
    public readonly multiAz: boolean;
    public readonly instanceName: string;
    public readonly optionGroupName: string;
    public readonly parameterGroupName: string;
    public readonly password?: string;
    public readonly port: number;
    public readonly publiclyAccessible?: boolean;
    public /*out*/ readonly replicas: string[];
    public readonly replicateSourceDb?: string;
    public /*out*/ readonly resourceId: string;
    public readonly securityGroupNames?: string[];
    public readonly skipFinalSnapshot?: boolean;
    public readonly snapshotIdentifier?: string;
    public /*out*/ readonly status: string;
    public readonly storageEncrypted?: boolean;
    public readonly storageType: string;
    public readonly tags?: {[key: string]: any};
    public readonly timezone: string;
    public readonly username: string;
    public readonly vpcSecurityGroupIds: string[];

    public static get(id: lumi.ID): Instance {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Instance[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: InstanceArgs) {
        super(name);
        this.allocatedStorage = <any>args.allocatedStorage;
        this.allowMajorVersionUpgrade = <any>args.allowMajorVersionUpgrade;
        this.applyImmediately = <any>args.applyImmediately;
        this.autoMinorVersionUpgrade = <any>args.autoMinorVersionUpgrade;
        this.availabilityZone = <any>args.availabilityZone;
        this.backupRetentionPeriod = <any>args.backupRetentionPeriod;
        this.backupWindow = <any>args.backupWindow;
        this.characterSetName = <any>args.characterSetName;
        this.copyTagsToSnapshot = <any>args.copyTagsToSnapshot;
        this.dbSubnetGroupName = <any>args.dbSubnetGroupName;
        this.engine = <any>args.engine;
        this.engineVersion = <any>args.engineVersion;
        this.finalSnapshotIdentifier = <any>args.finalSnapshotIdentifier;
        this.iamDatabaseAuthenticationEnabled = <any>args.iamDatabaseAuthenticationEnabled;
        this.identifier = <any>args.identifier;
        this.identifierPrefix = <any>args.identifierPrefix;
        if (lumirt.defaultIfComputed(args.instanceClass, "") === undefined) {
            throw new Error("Property argument 'instanceClass' is required, but was missing");
        }
        this.instanceClass = <any>args.instanceClass;
        this.iops = <any>args.iops;
        this.kmsKeyId = <any>args.kmsKeyId;
        this.licenseModel = <any>args.licenseModel;
        this.maintenanceWindow = <any>args.maintenanceWindow;
        this.monitoringInterval = <any>args.monitoringInterval;
        this.monitoringRoleArn = <any>args.monitoringRoleArn;
        this.multiAz = <any>args.multiAz;
        this.instanceName = <any>args.instanceName;
        this.optionGroupName = <any>args.optionGroupName;
        this.parameterGroupName = <any>args.parameterGroupName;
        this.password = <any>args.password;
        this.port = <any>args.port;
        this.publiclyAccessible = <any>args.publiclyAccessible;
        this.replicateSourceDb = <any>args.replicateSourceDb;
        this.securityGroupNames = <any>args.securityGroupNames;
        this.skipFinalSnapshot = <any>args.skipFinalSnapshot;
        this.snapshotIdentifier = <any>args.snapshotIdentifier;
        this.storageEncrypted = <any>args.storageEncrypted;
        this.storageType = <any>args.storageType;
        this.tags = <any>args.tags;
        this.timezone = <any>args.timezone;
        this.username = <any>args.username;
        this.vpcSecurityGroupIds = <any>args.vpcSecurityGroupIds;
    }
}

export interface InstanceArgs {
    readonly allocatedStorage?: number;
    readonly allowMajorVersionUpgrade?: boolean;
    readonly applyImmediately?: boolean;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly availabilityZone?: string;
    readonly backupRetentionPeriod?: number;
    readonly backupWindow?: string;
    readonly characterSetName?: string;
    readonly copyTagsToSnapshot?: boolean;
    readonly dbSubnetGroupName?: string;
    readonly engine?: string;
    readonly engineVersion?: string;
    readonly finalSnapshotIdentifier?: string;
    readonly iamDatabaseAuthenticationEnabled?: boolean;
    readonly identifier?: string;
    readonly identifierPrefix?: string;
    readonly instanceClass: string;
    readonly iops?: number;
    readonly kmsKeyId?: string;
    readonly licenseModel?: string;
    readonly maintenanceWindow?: string;
    readonly monitoringInterval?: number;
    readonly monitoringRoleArn?: string;
    readonly multiAz?: boolean;
    readonly instanceName?: string;
    readonly optionGroupName?: string;
    readonly parameterGroupName?: string;
    readonly password?: string;
    readonly port?: number;
    readonly publiclyAccessible?: boolean;
    readonly replicateSourceDb?: string;
    readonly securityGroupNames?: string[];
    readonly skipFinalSnapshot?: boolean;
    readonly snapshotIdentifier?: string;
    readonly storageEncrypted?: boolean;
    readonly storageType?: string;
    readonly tags?: {[key: string]: any};
    readonly timezone?: string;
    readonly username?: string;
    readonly vpcSecurityGroupIds?: string[];
}

