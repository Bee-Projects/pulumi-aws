// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Repository extends lumi.NamedResource implements RepositoryArgs {
    public /*out*/ readonly arn: string;
    public /*out*/ readonly cloneUrlHttp: string;
    public /*out*/ readonly cloneUrlSsh: string;
    public readonly defaultBranch?: string;
    public readonly description?: string;
    public /*out*/ readonly repositoryId: string;
    public readonly repositoryName: string;

    public static get(id: lumi.ID): Repository {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Repository[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: RepositoryArgs) {
        super(urnName);
        this.defaultBranch = <any>args.defaultBranch;
        this.description = <any>args.description;
        if (lumirt.defaultIfComputed(args.repositoryName, "") === undefined) {
            throw new Error("Property argument 'repositoryName' is required, but was missing");
        }
        this.repositoryName = <any>args.repositoryName;
    }
}

export interface RepositoryArgs {
    readonly defaultBranch?: string;
    readonly description?: string;
    readonly repositoryName: string;
}

