// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class Pipeline extends lumi.NamedResource implements PipelineArgs {
    public readonly artifactStore: { encryptionKey?: { id: string, type: string }[], location: string, type: string }[];
    public readonly pipelineName?: string;
    public readonly roleArn: string;
    public readonly stage: { action: { category: string, configuration?: {[key: string]: any}, inputArtifacts?: string[], name: string, outputArtifacts?: string[], owner: string, provider: string, roleArn?: string, runOrder: number, version: string }[], name: string }[];

    constructor(name: string, args: PipelineArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.artifactStore, "") === undefined) {
            throw new Error("Property argument 'artifactStore' is required, but was missing");
        }
        this.artifactStore = args.artifactStore;
        this.pipelineName = args.pipelineName;
        if (lumirt.defaultIfComputed(args.roleArn, "") === undefined) {
            throw new Error("Property argument 'roleArn' is required, but was missing");
        }
        this.roleArn = args.roleArn;
        if (lumirt.defaultIfComputed(args.stage, "") === undefined) {
            throw new Error("Property argument 'stage' is required, but was missing");
        }
        this.stage = args.stage;
    }
}

export interface PipelineArgs {
    readonly artifactStore: { encryptionKey?: { id: string, type: string }[], location: string, type: string }[];
    readonly pipelineName?: string;
    readonly roleArn: string;
    readonly stage: { action: { category: string, configuration?: {[key: string]: any}, inputArtifacts?: string[], name: string, outputArtifacts?: string[], owner: string, provider: string, roleArn?: string, runOrder: number, version: string }[], name: string }[];
}

