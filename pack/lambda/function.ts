// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

import {ARN} from "../index";

export class Function extends fabric.Resource {
    public /*out*/ readonly arn: fabric.Property<string>;
    public readonly deadLetterConfig?: fabric.Property<{ targetArn: string }[]>;
    public readonly description?: fabric.Property<string>;
    public readonly environment?: fabric.Property<{ variables?: {[key: string]: string} }[]>;
    public readonly code?: fabric.Property<fabric.asset.Archive>;
    public readonly name: fabric.Property<string>;
    public readonly handler: fabric.Property<string>;
    public /*out*/ readonly invokeArn: fabric.Property<string>;
    public readonly kmsKeyArn?: fabric.Property<string>;
    public /*out*/ readonly lastModified: fabric.Property<string>;
    public readonly memorySize?: fabric.Property<number>;
    public readonly publish?: fabric.Property<boolean>;
    public /*out*/ readonly qualifiedArn: fabric.Property<string>;
    public readonly role: fabric.Property<ARN>;
    public readonly runtime: fabric.Property<string>;
    public readonly s3Bucket?: fabric.Property<string>;
    public readonly s3Key?: fabric.Property<string>;
    public readonly s3ObjectVersion?: fabric.Property<string>;
    public readonly sourceCodeHash: fabric.Property<string>;
    public readonly tags?: fabric.Property<{[key: string]: any}>;
    public readonly timeout?: fabric.Property<number>;
    public readonly tracingConfig: fabric.Property<{ mode: string }[]>;
    public /*out*/ readonly version: fabric.Property<string>;
    public readonly vpcConfig?: fabric.Property<{ securityGroupIds: string[], subnetIds: string[], vpcId: string }[]>;

    constructor(urnName: string, args: FunctionArgs) {
        if (args.handler === undefined) {
            throw new Error("Missing required property 'handler'");
        }
        if (args.role === undefined) {
            throw new Error("Missing required property 'role'");
        }
        if (args.runtime === undefined) {
            throw new Error("Missing required property 'runtime'");
        }
        super("aws:lambda/function:Function", urnName, {
            "deadLetterConfig": args.deadLetterConfig,
            "description": args.description,
            "environment": args.environment,
            "code": args.code,
            "name": args.name,
            "handler": args.handler,
            "kmsKeyArn": args.kmsKeyArn,
            "memorySize": args.memorySize,
            "publish": args.publish,
            "role": args.role,
            "runtime": args.runtime,
            "s3Bucket": args.s3Bucket,
            "s3Key": args.s3Key,
            "s3ObjectVersion": args.s3ObjectVersion,
            "sourceCodeHash": args.sourceCodeHash,
            "tags": args.tags,
            "timeout": args.timeout,
            "tracingConfig": args.tracingConfig,
            "vpcConfig": args.vpcConfig,
        });
    }
}

export interface FunctionArgs {
    readonly deadLetterConfig?: fabric.PropertyValue<{ targetArn: fabric.PropertyValue<string> }>[];
    readonly description?: fabric.PropertyValue<string>;
    readonly environment?: fabric.PropertyValue<{ variables?: fabric.PropertyValue<{[key: string]: fabric.PropertyValue<string>}> }>[];
    readonly code?: fabric.asset.Archive;
    readonly name?: fabric.PropertyValue<string>;
    readonly handler: fabric.PropertyValue<string>;
    readonly kmsKeyArn?: fabric.PropertyValue<string>;
    readonly memorySize?: fabric.PropertyValue<number>;
    readonly publish?: fabric.PropertyValue<boolean>;
    readonly role: fabric.PropertyValue<ARN>;
    readonly runtime: fabric.PropertyValue<string>;
    readonly s3Bucket?: fabric.PropertyValue<string>;
    readonly s3Key?: fabric.PropertyValue<string>;
    readonly s3ObjectVersion?: fabric.PropertyValue<string>;
    readonly sourceCodeHash?: fabric.PropertyValue<string>;
    readonly tags?: fabric.PropertyValue<{[key: string]: any}>;
    readonly timeout?: fabric.PropertyValue<number>;
    readonly tracingConfig?: fabric.PropertyValue<{ mode: fabric.PropertyValue<string> }>[];
    readonly vpcConfig?: fabric.PropertyValue<{ securityGroupIds: fabric.PropertyValue<fabric.PropertyValue<string>>[], subnetIds: fabric.PropertyValue<fabric.PropertyValue<string>>[], vpcId?: fabric.PropertyValue<string> }>[];
}

