// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {Function} from "./function";

export class Permission extends lumi.NamedResource implements PermissionArgs {
    public readonly action: string;
    public readonly function: Function;
    public readonly principal: string;
    public readonly qualifier?: string;
    public readonly sourceAccount?: string;
    public readonly sourceArn?: string;
    public readonly statementId: string;

    public static get(id: lumi.ID): Permission {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Permission[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: PermissionArgs) {
        super(name);
        if (lumirt.defaultIfComputed(args.action, "") === undefined) {
            throw new Error("Property argument 'action' is required, but was missing");
        }
        this.action = <any>args.action;
        if (lumirt.defaultIfComputed(args.function, "") === undefined) {
            throw new Error("Property argument 'function' is required, but was missing");
        }
        this.function = <any>args.function;
        if (lumirt.defaultIfComputed(args.principal, "") === undefined) {
            throw new Error("Property argument 'principal' is required, but was missing");
        }
        this.principal = <any>args.principal;
        this.qualifier = <any>args.qualifier;
        this.sourceAccount = <any>args.sourceAccount;
        this.sourceArn = <any>args.sourceArn;
        this.statementId = <any>args.statementId;
    }
}

export interface PermissionArgs {
    readonly action: string;
    readonly function: Function;
    readonly principal: string;
    readonly qualifier?: string;
    readonly sourceAccount?: string;
    readonly sourceArn?: string;
    readonly statementId?: string;
}

