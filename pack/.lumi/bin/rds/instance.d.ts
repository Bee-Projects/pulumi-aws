import * as lumi from "@lumi/lumi";
export declare class Instance extends lumi.NamedResource implements InstanceArgs {
    readonly address: string;
    readonly allocatedStorage: number;
    readonly allowMajorVersionUpgrade?: boolean;
    readonly applyImmediately: boolean;
    readonly arn: string;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly availabilityZone: string;
    readonly backupRetentionPeriod: number;
    readonly backupWindow: string;
    readonly characterSetName: string;
    readonly copyTagsToSnapshot?: boolean;
    readonly dbSubnetGroupName: string;
    readonly endpoint: string;
    readonly engine: string;
    readonly engineVersion: string;
    readonly finalSnapshotIdentifier?: string;
    readonly hostedZoneId: string;
    readonly iamDatabaseAuthenticationEnabled?: boolean;
    readonly identifier: string;
    readonly identifierPrefix: string;
    readonly instanceClass: string;
    readonly iops?: number;
    readonly kmsKeyId: string;
    readonly licenseModel: string;
    readonly maintenanceWindow: string;
    readonly monitoringInterval?: number;
    readonly monitoringRoleArn: string;
    readonly multiAz: boolean;
    readonly instanceName: string;
    readonly optionGroupName: string;
    readonly parameterGroupName: string;
    readonly password?: string;
    readonly port: number;
    readonly publiclyAccessible?: boolean;
    readonly replicas: string[];
    readonly replicateSourceDb?: string;
    readonly resourceId: string;
    readonly securityGroupNames?: string[];
    readonly skipFinalSnapshot?: boolean;
    readonly snapshotIdentifier?: string;
    readonly status: string;
    readonly storageEncrypted?: boolean;
    readonly storageType: string;
    readonly tags?: {
        [key: string]: any;
    };
    readonly timezone: string;
    readonly username: string;
    readonly vpcSecurityGroupIds: string[];
    constructor(name: string, args: InstanceArgs);
}
export interface InstanceArgs {
    readonly allocatedStorage?: number;
    readonly allowMajorVersionUpgrade?: boolean;
    readonly applyImmediately?: boolean;
    readonly autoMinorVersionUpgrade?: boolean;
    readonly availabilityZone?: string;
    readonly backupRetentionPeriod?: number;
    readonly backupWindow?: string;
    readonly characterSetName?: string;
    readonly copyTagsToSnapshot?: boolean;
    readonly dbSubnetGroupName?: string;
    readonly engine?: string;
    readonly engineVersion?: string;
    readonly finalSnapshotIdentifier?: string;
    readonly iamDatabaseAuthenticationEnabled?: boolean;
    readonly identifier?: string;
    readonly identifierPrefix?: string;
    readonly instanceClass: string;
    readonly iops?: number;
    readonly kmsKeyId?: string;
    readonly licenseModel?: string;
    readonly maintenanceWindow?: string;
    readonly monitoringInterval?: number;
    readonly monitoringRoleArn?: string;
    readonly multiAz?: boolean;
    readonly instanceName?: string;
    readonly optionGroupName?: string;
    readonly parameterGroupName?: string;
    readonly password?: string;
    readonly port?: number;
    readonly publiclyAccessible?: boolean;
    readonly replicateSourceDb?: string;
    readonly securityGroupNames?: string[];
    readonly skipFinalSnapshot?: boolean;
    readonly snapshotIdentifier?: string;
    readonly storageEncrypted?: boolean;
    readonly storageType?: string;
    readonly tags?: {
        [key: string]: any;
    };
    readonly timezone?: string;
    readonly username?: string;
    readonly vpcSecurityGroupIds?: string[];
}

