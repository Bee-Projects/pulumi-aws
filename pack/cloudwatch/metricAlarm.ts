// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as fabric from "@pulumi/pulumi-fabric";

import {Topic} from "../sns/topic";

export class MetricAlarm extends fabric.Resource {
    public readonly actionsEnabled?: fabric.Property<boolean>;
    public readonly alarmActions?: fabric.Property<Topic[]>;
    public readonly alarmDescription?: fabric.Property<string>;
    public readonly name: fabric.Property<string>;
    public readonly comparisonOperator: fabric.Property<string>;
    public readonly dimensions?: fabric.Property<{[key: string]: any}>;
    public readonly evaluateLowSampleCountPercentiles: fabric.Property<string>;
    public readonly evaluationPeriods: fabric.Property<number>;
    public readonly extendedStatistic?: fabric.Property<string>;
    public readonly insufficientDataActions?: fabric.Property<Topic[]>;
    public readonly metricName: fabric.Property<string>;
    public readonly namespace: fabric.Property<string>;
    public readonly okActions?: fabric.Property<Topic[]>;
    public readonly period: fabric.Property<number>;
    public readonly statistic?: fabric.Property<string>;
    public readonly threshold: fabric.Property<number>;
    public readonly treatMissingData?: fabric.Property<string>;
    public readonly unit?: fabric.Property<string>;

    constructor(urnName: string, args: MetricAlarmArgs) {
        if (args.comparisonOperator === undefined) {
            throw new Error("Missing required property 'comparisonOperator'");
        }
        if (args.evaluationPeriods === undefined) {
            throw new Error("Missing required property 'evaluationPeriods'");
        }
        if (args.metricName === undefined) {
            throw new Error("Missing required property 'metricName'");
        }
        if (args.namespace === undefined) {
            throw new Error("Missing required property 'namespace'");
        }
        if (args.period === undefined) {
            throw new Error("Missing required property 'period'");
        }
        if (args.threshold === undefined) {
            throw new Error("Missing required property 'threshold'");
        }
        super("aws:cloudwatch/metricAlarm:MetricAlarm", urnName, {
            "actionsEnabled": args.actionsEnabled,
            "alarmActions": args.alarmActions,
            "alarmDescription": args.alarmDescription,
            "name": args.name,
            "comparisonOperator": args.comparisonOperator,
            "dimensions": args.dimensions,
            "evaluateLowSampleCountPercentiles": args.evaluateLowSampleCountPercentiles,
            "evaluationPeriods": args.evaluationPeriods,
            "extendedStatistic": args.extendedStatistic,
            "insufficientDataActions": args.insufficientDataActions,
            "metricName": args.metricName,
            "namespace": args.namespace,
            "okActions": args.okActions,
            "period": args.period,
            "statistic": args.statistic,
            "threshold": args.threshold,
            "treatMissingData": args.treatMissingData,
            "unit": args.unit,
        });
    }
}

export interface MetricAlarmArgs {
    readonly actionsEnabled?: fabric.PropertyValue<boolean>;
    readonly alarmActions?: fabric.PropertyValue<fabric.PropertyValue<Topic>>[];
    readonly alarmDescription?: fabric.PropertyValue<string>;
    readonly name?: fabric.PropertyValue<string>;
    readonly comparisonOperator: fabric.PropertyValue<string>;
    readonly dimensions?: fabric.PropertyValue<{[key: string]: any}>;
    readonly evaluateLowSampleCountPercentiles?: fabric.PropertyValue<string>;
    readonly evaluationPeriods: fabric.PropertyValue<number>;
    readonly extendedStatistic?: fabric.PropertyValue<string>;
    readonly insufficientDataActions?: fabric.PropertyValue<fabric.PropertyValue<Topic>>[];
    readonly metricName: fabric.PropertyValue<string>;
    readonly namespace: fabric.PropertyValue<string>;
    readonly okActions?: fabric.PropertyValue<fabric.PropertyValue<Topic>>[];
    readonly period: fabric.PropertyValue<number>;
    readonly statistic?: fabric.PropertyValue<string>;
    readonly threshold: fabric.PropertyValue<number>;
    readonly treatMissingData?: fabric.PropertyValue<string>;
    readonly unit?: fabric.PropertyValue<string>;
}

