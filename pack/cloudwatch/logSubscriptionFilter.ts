// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

import {LogGroup} from "./logGroup";

export class LogSubscriptionFilter extends lumi.NamedResource implements LogSubscriptionFilterArgs {
    public readonly destinationArn: string;
    public readonly filterPattern: string;
    public readonly logGroup: LogGroup;
    public readonly name: string;
    public readonly roleArn: string;

    public static get(id: lumi.ID): LogSubscriptionFilter {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): LogSubscriptionFilter[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: LogSubscriptionFilterArgs) {
        super(urnName);
        if (lumirt.defaultIfComputed(args.destinationArn, "") === undefined) {
            throw new Error("Property argument 'destinationArn' is required, but was missing");
        }
        this.destinationArn = <any>args.destinationArn;
        if (lumirt.defaultIfComputed(args.filterPattern, "") === undefined) {
            throw new Error("Property argument 'filterPattern' is required, but was missing");
        }
        this.filterPattern = <any>args.filterPattern;
        if (lumirt.defaultIfComputed(args.logGroup, "") === undefined) {
            throw new Error("Property argument 'logGroup' is required, but was missing");
        }
        this.logGroup = <any>args.logGroup;
        this.name = <any>args.name;
        this.roleArn = <any>args.roleArn;
    }
}

export interface LogSubscriptionFilterArgs {
    readonly destinationArn: string;
    readonly filterPattern: string;
    readonly logGroup: LogGroup;
    readonly name?: string;
    readonly roleArn?: string;
}

