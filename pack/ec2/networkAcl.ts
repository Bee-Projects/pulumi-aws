// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class NetworkAcl extends lumi.NamedResource implements NetworkAclArgs {
    public readonly egress: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    public readonly ingress: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    public readonly subnetId?: string;
    public readonly subnetIds: string[];
    public readonly tags?: {[key: string]: any};
    public readonly vpcId: string;

    public static get(id: lumi.ID): NetworkAcl {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): NetworkAcl[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(urnName: string, args: NetworkAclArgs) {
        super(urnName);
        this.egress = <any>args.egress;
        this.ingress = <any>args.ingress;
        this.subnetId = <any>args.subnetId;
        this.subnetIds = <any>args.subnetIds;
        this.tags = <any>args.tags;
        if (lumirt.defaultIfComputed(args.vpcId, "") === undefined) {
            throw new Error("Property argument 'vpcId' is required, but was missing");
        }
        this.vpcId = <any>args.vpcId;
    }
}

export interface NetworkAclArgs {
    readonly egress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    readonly ingress?: { action: string, cidrBlock?: string, fromPort: number, icmpCode?: number, icmpType?: number, ipv6CidrBlock?: string, protocol: string, ruleNo: number, toPort: number }[];
    readonly subnetId?: string;
    readonly subnetIds?: string[];
    readonly tags?: {[key: string]: any};
    readonly vpcId: string;
}

