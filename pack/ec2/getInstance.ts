// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * Use this data source to get the ID of an Amazon EC2 Instance for use in other
 * resources.
 */
export function getInstance(args?: GetInstanceArgs): Promise<GetInstanceResult> {
    args = args || {};
    return pulumi.runtime.invoke("aws:ec2/getInstance:getInstance", {
        "filter": args.filter,
        "instanceId": args.instanceId,
        "instanceTags": args.instanceTags,
    });
}

/**
 * A collection of arguments for invoking getInstance.
 */
export interface GetInstanceArgs {
    /**
     * One or more name/value pairs to use as filters. There are
     * several valid keys, for a full reference, check out
     * [describe-instances in the AWS CLI reference][1].
     */
    filter?: pulumi.ComputedValue<{ name: pulumi.ComputedValue<string>, values: pulumi.ComputedValue<pulumi.ComputedValue<string>>[] }>[];
    /**
     * Specify the exact Instance ID with which to populate the data source.
     */
    instanceId?: pulumi.ComputedValue<string>;
    /**
     * A mapping of tags, each pair of which must
     * exactly match a pair on the desired Instance.
     */
    instanceTags?: pulumi.ComputedValue<{[key: string]: any}>;
}

/**
 * A collection of values returned by getInstance.
 */
export interface GetInstanceResult {
    ami: string;
    /**
     * Whether or not the Instance is associated with a public IP address or not (Boolean).
     */
    associatePublicIpAddress: boolean;
    /**
     * The availability zone of the Instance.
     */
    availabilityZone: string;
    /**
     * The EBS block device mappings of the Instance.
     */
    ebsBlockDevice: { deleteOnTermination: boolean, deviceName: string, encrypted: boolean, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    /**
     * Whether the Instance is EBS optimized or not (Boolean).
     */
    ebsOptimized: boolean;
    /**
     * The ephemeral block device mappings of the Instance.
     */
    ephemeralBlockDevice: { deviceName: string, noDevice?: boolean, virtualName?: string }[];
    /**
     * The name of the instance profile associated with the Instance.
     */
    iamInstanceProfile: string;
    instanceState: string;
    instanceTags: {[key: string]: any};
    /**
     * The type of the Instance.
     */
    instanceType: string;
    /**
     * The key name of the Instance.
     */
    keyName: string;
    /**
     * Whether detailed monitoring is enabled or disabled for the Instance (Boolean).
     */
    monitoring: boolean;
    /**
     * The ID of the network interface that was created with the Instance.
     */
    networkInterfaceId: string;
    /**
     * The private DNS name assigned to the Instance. Can only be
     * used inside the Amazon EC2, and only available if you've enabled DNS hostnames
     * for your VPC.
     */
    privateDns: string;
    /**
     * The private IP address assigned to the Instance.
     */
    privateIp: string;
    /**
     * The public DNS name assigned to the Instance. For EC2-VPC, this
     * is only available if you've enabled DNS hostnames for your VPC.
     */
    publicDns: string;
    /**
     * The public IP address assigned to the Instance, if applicable. **NOTE**: If you are using an [`aws_eip`](/docs/providers/aws/r/eip.html) with your instance, you should refer to the EIP's address directly and not use `public_ip`, as this field will change after the EIP is attached.
     */
    publicIp: string;
    /**
     * The root block device mappings of the Instance
     */
    rootBlockDevice: { deleteOnTermination: boolean, iops: number, volumeSize: number, volumeType: string }[];
    /**
     * The associated security groups.
     */
    securityGroups: string[];
    /**
     * Whether the network interface performs source/destination checking (Boolean).
     */
    sourceDestCheck: boolean;
    /**
     * The VPC subnet ID.
     */
    subnetId: string;
    /**
     * A mapping of tags assigned to the Instance.
     */
    tags: { key: string, value: string }[];
    /**
     * The tenancy of the instance: `dedicated`, `default`, `host`.
     */
    tenancy: string;
    /**
     * The User Data supplied to the Instance.
     */
    userData: string;
    /**
     * The associated security groups in a non-default VPC.
     */
    vpcSecurityGroupIds: string[];
}

