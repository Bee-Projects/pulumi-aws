// *** WARNING: this file was generated by the Pulumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "pulumi";

/**
 * `aws_vpc` provides details about a specific VPC.
 * 
 * This resource can prove useful when a module accepts a vpc id as
 * an input variable and needs to, for example, determine the CIDR block of that
 * VPC.
 */
export function getVpc(args?: GetVpcArgs): Promise<GetVpcResult> {
    args = args || {};
    return pulumi.runtime.invoke("aws:ec2/getVpc:getVpc", {
        "cidrBlock": args.cidrBlock,
        "default": args.default,
        "dhcpOptionsId": args.dhcpOptionsId,
        "filter": args.filter,
        "id": args.id,
        "state": args.state,
        "tags": args.tags,
    });
}

/**
 * A collection of arguments for invoking getVpc.
 */
export interface GetVpcArgs {
    /**
     * The cidr block of the desired VPC.
     */
    cidrBlock?: pulumi.ComputedValue<string>;
    /**
     * Boolean constraint on whether the desired VPC is
     * the default VPC for the region.
     */
    default?: pulumi.ComputedValue<boolean>;
    /**
     * The DHCP options id of the desired VPC.
     */
    dhcpOptionsId?: pulumi.ComputedValue<string>;
    /**
     * Custom filter block as described below.
     */
    filter?: pulumi.ComputedValue<{ name: pulumi.ComputedValue<string>, values: pulumi.ComputedValue<pulumi.ComputedValue<string>>[] }>[];
    /**
     * The id of the specific VPC to retrieve.
     */
    id?: pulumi.ComputedValue<string>;
    /**
     * The current state of the desired VPC.
     * Can be either `"pending"` or `"available"`.
     */
    state?: pulumi.ComputedValue<string>;
    /**
     * A mapping of tags, each pair of which must exactly match
     * a pair on the desired VPC.
     */
    tags?: pulumi.ComputedValue<{[key: string]: any}>;
}

/**
 * A collection of values returned by getVpc.
 */
export interface GetVpcResult {
    cidrBlock: string;
    default: boolean;
    dhcpOptionsId: string;
    /**
     * Whether or not the VPC has DNS hostname support
     */
    enableDnsHostnames: boolean;
    /**
     * Whether or not the VPC has DNS support
     */
    enableDnsSupport: boolean;
    id: string;
    /**
     * The allowed tenancy of instances launched into the
     * selected VPC. May be any of `"default"`, `"dedicated"`, or `"host"`.
     */
    instanceTenancy: string;
    /**
     * The association ID for the IPv6 CIDR block.
     */
    ipv6AssociationId: string;
    /**
     * The IPv6 CIDR block.
     */
    ipv6CidrBlock: string;
    state: string;
    tags: {[key: string]: any};
}

