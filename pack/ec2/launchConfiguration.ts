// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class LaunchConfiguration extends lumi.NamedResource implements LaunchConfigurationArgs {
    public readonly associatePublicIpAddress?: boolean;
    public readonly ebsBlockDevice: { deleteOnTermination?: boolean, deviceName: string, encrypted: boolean, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    public readonly ebsOptimized: boolean;
    public readonly enableMonitoring?: boolean;
    public readonly ephemeralBlockDevice?: { deviceName: string, virtualName: string }[];
    public readonly iamInstanceProfile?: string;
    public readonly imageId: string;
    public readonly instanceType: string;
    public readonly keyName: string;
    public readonly launchConfigurationName: string;
    public readonly namePrefix?: string;
    public readonly placementTenancy?: string;
    public readonly rootBlockDevice: { deleteOnTermination?: boolean, iops: number, volumeSize: number, volumeType: string }[];
    public readonly securityGroups?: string[];
    public readonly spotPrice?: string;
    public readonly userData?: string;
    public readonly vpcClassicLinkId?: string;
    public readonly vpcClassicLinkSecurityGroups?: string[];

    constructor(name: string, args: LaunchConfigurationArgs) {
        super(name);
        this.associatePublicIpAddress = args.associatePublicIpAddress;
        this.ebsBlockDevice = args.ebsBlockDevice;
        this.ebsOptimized = args.ebsOptimized;
        this.enableMonitoring = args.enableMonitoring;
        this.ephemeralBlockDevice = args.ephemeralBlockDevice;
        this.iamInstanceProfile = args.iamInstanceProfile;
        if (lumirt.defaultIfComputed(args.imageId, "") === undefined) {
            throw new Error("Property argument 'imageId' is required, but was missing");
        }
        this.imageId = args.imageId;
        if (lumirt.defaultIfComputed(args.instanceType, "") === undefined) {
            throw new Error("Property argument 'instanceType' is required, but was missing");
        }
        this.instanceType = args.instanceType;
        this.keyName = args.keyName;
        this.launchConfigurationName = args.launchConfigurationName;
        this.namePrefix = args.namePrefix;
        this.placementTenancy = args.placementTenancy;
        this.rootBlockDevice = args.rootBlockDevice;
        this.securityGroups = args.securityGroups;
        this.spotPrice = args.spotPrice;
        this.userData = args.userData;
        this.vpcClassicLinkId = args.vpcClassicLinkId;
        this.vpcClassicLinkSecurityGroups = args.vpcClassicLinkSecurityGroups;
    }
}

export interface LaunchConfigurationArgs {
    readonly associatePublicIpAddress?: boolean;
    readonly ebsBlockDevice?: { deleteOnTermination?: boolean, deviceName: string, encrypted: boolean, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    readonly ebsOptimized?: boolean;
    readonly enableMonitoring?: boolean;
    readonly ephemeralBlockDevice?: { deviceName: string, virtualName: string }[];
    readonly iamInstanceProfile?: string;
    readonly imageId: string;
    readonly instanceType: string;
    readonly keyName?: string;
    readonly launchConfigurationName?: string;
    readonly namePrefix?: string;
    readonly placementTenancy?: string;
    readonly rootBlockDevice?: { deleteOnTermination?: boolean, iops: number, volumeSize: number, volumeType: string }[];
    readonly securityGroups?: string[];
    readonly spotPrice?: string;
    readonly userData?: string;
    readonly vpcClassicLinkId?: string;
    readonly vpcClassicLinkSecurityGroups?: string[];
}

