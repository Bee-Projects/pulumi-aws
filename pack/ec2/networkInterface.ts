// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class NetworkInterface extends lumi.NamedResource implements NetworkInterfaceArgs {
    public readonly attachment: { attachmentId: string, deviceIndex: number, instance: string }[];
    public readonly description?: string;
    public readonly privateIp: string;
    public readonly privateIps: string[];
    public readonly privateIpsCount: number;
    public readonly securityGroups: string[];
    public readonly sourceDestCheck?: boolean;
    public readonly subnetId: string;
    public readonly tags?: {[key: string]: any};

    public static get(id: lumi.ID): NetworkInterface {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): NetworkInterface[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: NetworkInterfaceArgs) {
        super(name);
        this.attachment = <any>args.attachment;
        this.description = <any>args.description;
        this.privateIp = <any>args.privateIp;
        this.privateIps = <any>args.privateIps;
        this.privateIpsCount = <any>args.privateIpsCount;
        this.securityGroups = <any>args.securityGroups;
        this.sourceDestCheck = <any>args.sourceDestCheck;
        if (lumirt.defaultIfComputed(args.subnetId, "") === undefined) {
            throw new Error("Property argument 'subnetId' is required, but was missing");
        }
        this.subnetId = <any>args.subnetId;
        this.tags = <any>args.tags;
    }
}

export interface NetworkInterfaceArgs {
    readonly attachment?: { attachmentId?: string, deviceIndex: number, instance: string }[];
    readonly description?: string;
    readonly privateIp?: string;
    readonly privateIps?: string[];
    readonly privateIpsCount?: number;
    readonly securityGroups?: string[];
    readonly sourceDestCheck?: boolean;
    readonly subnetId: string;
    readonly tags?: {[key: string]: any};
}

