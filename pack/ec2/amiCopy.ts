// *** WARNING: this file was generated by the Lumi Terraform Bridge (TFGEN) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as lumi from "@lumi/lumi";
import * as lumirt from "@lumi/lumirt";

export class AmiCopy extends lumi.NamedResource implements AmiCopyArgs {
    public /*out*/ readonly architecture: string;
    public readonly description?: string;
    public readonly ebsBlockDevice: { deleteOnTermination: boolean, deviceName: string, encrypted: boolean, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    public readonly encrypted?: boolean;
    public readonly ephemeralBlockDevice: { deviceName: string, virtualName: string }[];
    public /*out*/ readonly amiId: string;
    public /*out*/ readonly imageLocation: string;
    public /*out*/ readonly kernelId: string;
    public readonly kmsKeyId: string;
    public /*out*/ readonly manageEbsSnapshots: boolean;
    public readonly amiCopyName?: string;
    public /*out*/ readonly ramdiskId: string;
    public /*out*/ readonly rootDeviceName: string;
    public readonly sourceAmiId: string;
    public readonly sourceAmiRegion: string;
    public /*out*/ readonly sriovNetSupport: string;
    public readonly tags?: {[key: string]: any};
    public /*out*/ readonly virtualizationType: string;

    constructor(name: string, args: AmiCopyArgs) {
        super(name);
        this.description = args.description;
        this.ebsBlockDevice = args.ebsBlockDevice;
        this.encrypted = args.encrypted;
        this.ephemeralBlockDevice = args.ephemeralBlockDevice;
        this.kmsKeyId = args.kmsKeyId;
        this.amiCopyName = args.amiCopyName;
        if (lumirt.defaultIfComputed(args.sourceAmiId, "") === undefined) {
            throw new Error("Property argument 'sourceAmiId' is required, but was missing");
        }
        this.sourceAmiId = args.sourceAmiId;
        if (lumirt.defaultIfComputed(args.sourceAmiRegion, "") === undefined) {
            throw new Error("Property argument 'sourceAmiRegion' is required, but was missing");
        }
        this.sourceAmiRegion = args.sourceAmiRegion;
        this.tags = args.tags;
    }
}

export interface AmiCopyArgs {
    readonly description?: string;
    readonly ebsBlockDevice?: { deleteOnTermination: boolean, deviceName: string, encrypted: boolean, iops: number, snapshotId: string, volumeSize: number, volumeType: string }[];
    readonly encrypted?: boolean;
    readonly ephemeralBlockDevice?: { deviceName: string, virtualName: string }[];
    readonly kmsKeyId?: string;
    readonly amiCopyName?: string;
    readonly sourceAmiId: string;
    readonly sourceAmiRegion: string;
    readonly tags?: {[key: string]: any};
}

